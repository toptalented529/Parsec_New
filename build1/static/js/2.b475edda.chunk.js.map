{"version":3,"sources":["utils/calls/farms.ts","utils/calls/pools.ts","utils/calls/nfts.ts","components/BaseLayout.tsx","views/MarketPlace/hooks/useExchangeNFT.ts"],"names":["options","gasLimit","DEFAULT_GAS_LIMIT","stakeFarm","masterChefContract","pair","amount","value","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","deposit","tx","wait","receipt","status","unstakeFarm","withdraw","harvestFarm","getActivePools","block","eligiblePools","pools","filter","pool","sousId","isFinished","undefined","simpleRpcProvider","getBlockNumber","blockNumber","startBlockCalls","map","contractAddress","address","getAddress","name","endBlockCalls","multicall","sousChefV2","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte","ethers","utils","parseEther","overrides","mintNFT","nftContract","tokenID","mint","burnNFT","burn","getTokenURI","tokenURI","uri","approveMatchaToken","matchaTokenContract","nftExchangeAddr","approve","getApproveMatchaToken","owner","spender","allowance","approveNFT","originalNftContract","getApproveNFT","getApproved","buyToken","nftExchangeContract","readyToSellToken","price","cancelSellToken","setCurrentPrice","getAskLength","askLen","getAsks","getAsksDesc","getAsksByPage","page","size","getAsksByPageDesc","getAsksByUser","user","getAsksByUserDesc","GridLayout","styled","Grid","useExchangeNFT","exchangeNftContract","useExchangeNftContract","exchangeNftAddress","getExchangeNFTAddress","nftTokenContract","useNftTokenContract","useERC20","getColaAddress","handleApproveMatchaToken","useCallback","handleGetApproveMatchaToken","handleApproveNFT","handleGetApproveNFT","handleBuyToken","txHash","console","info","handleReadyToSellToken","BIG_TEN","pow","handleCancelSellToken","handleSetCurrentPrice","handleGetAskLength","handleGetAsks","handleGetAsksDesc","handleGetAsksByPage","handleGetAsksByPageDesc","handleGetAsksByUser","handleGetAsksByUserDesc","onApprove","onApproveMatchaToken","onBuyToken","onReadyToSellToken","onCancelSellToken","onSetCurrentPrice","onGetAskLength","onGetAsks","onGetAsksDesc","onGetAsksByPage","onGetAsksByPageDesc","onGetAsksByUser","onGetAsksByUserDesc","onGetApproved","onGetApprovedMatchaToken"],"mappings":"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","file":"static/js/2.b475edda.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.deposit(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const unstakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.withdraw(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const harvestFarm = async (masterChefContract, pair) => {\n  const tx = await masterChefContract.deposit(pair, '0', options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport pools from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = pools\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","import { DEFAULT_GAS_LIMIT } from 'config'\nimport { ethers } from 'ethers'\n\nconst options = {\n  gasLimit: ethers.utils.parseEther('0.0000000000003'),\n}\n\nconst overrides = {\n  value: ethers.utils.parseEther('0.1'),\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const mintNFT = async (nftContract, tokenID) => {\n  const tx = await nftContract.mint(tokenID, overrides)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const burnNFT = async (nftContract, address, tokenID) => {\n  const tx = await nftContract.burn(address, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getTokenURI = async (nftContract, address, tokenID) => {\n  const uri = await nftContract.tokenURI(tokenID)\n  return uri\n}\n\n// Exchange\nexport const approveMatchaToken = async (matchaTokenContract, nftExchangeAddr, amount) => {\n  const tx = await matchaTokenContract.approve(nftExchangeAddr, amount, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveMatchaToken = async (matchaTokenContract, owner, spender) => {\n  const value = await matchaTokenContract.allowance(owner, spender)\n  return value\n}\n\nexport const approveNFT = async (originalNftContract, nftExchangeAddr, tokenID) => {\n  const tx = await originalNftContract.approve(nftExchangeAddr, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveNFT = async (originalNftContract, tokenID) => {\n  const address = await originalNftContract.getApproved(tokenID)\n  return address\n}\n\nexport const buyToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.buyToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const readyToSellToken = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.readyToSellToken(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const cancelSellToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.cancelSellToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const setCurrentPrice = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.setCurrentPrice(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getAskLength = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAskLength()\n  return askLen\n}\n\nexport const getAsks = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsks()\n  return askLen\n}\n\nexport const getAsksDesc = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsksDesc()\n  return askLen\n}\n\nexport const getAsksByPage = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPage(page, size)\n  return askLen\n}\n\nexport const getAsksByPageDesc = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPageDesc(page, size)\n  return askLen\n}\n\nexport const getAsksByUser = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUser(user)\n  return askLen\n}\n\nexport const getAsksByUserDesc = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUserDesc(user)\n  return askLen\n}\n","import styled from 'styled-components'\nimport { Grid } from 'parsec-swap-uikit'\n\nconst GridLayout = styled(Grid)`\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 16px;\n  @media screen and (min-width: 660px) {\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 24px;\n  }\n  @media screen and (min-width: 1260px) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 24px;\n  }\n`\n\nexport default GridLayout\n","import { useCallback } from 'react'\nimport {\n  approveNFT,\n  approveMatchaToken,\n  buyToken,\n  readyToSellToken,\n  cancelSellToken,\n  setCurrentPrice,\n  getApproveNFT,\n  getAskLength,\n  getAsks,\n  getAsksDesc,\n  getAsksByPage,\n  getAsksByPageDesc,\n  getAsksByUser,\n  getAsksByUserDesc,\n  getApproveMatchaToken,\n} from 'utils/calls'\nimport { useExchangeNftContract, useNftTokenContract, useERC20 } from 'hooks/useContract'\nimport BigNumber from 'bignumber.js'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getExchangeNFTAddress, getColaAddress } from 'utils/addressHelpers'\n\nconst useExchangeNFT = () => {\n  const exchangeNftContract = useExchangeNftContract()\n  const exchangeNftAddress = getExchangeNFTAddress()\n  const nftTokenContract = useNftTokenContract()\n  const matchaTokenContract = useERC20(getColaAddress())\n\n  const handleApproveMatchaToken = useCallback(\n    async (amount: string) => {\n      await approveMatchaToken(matchaTokenContract, exchangeNftAddress, amount)\n    },\n    [matchaTokenContract, exchangeNftAddress],\n  )\n\n  const handleGetApproveMatchaToken = useCallback(\n    async (owner: string) => {\n      const value = await getApproveMatchaToken(matchaTokenContract, owner, exchangeNftAddress)\n      return value\n    },\n    [matchaTokenContract, exchangeNftAddress],\n  )\n\n  const handleApproveNFT = useCallback(\n    async (tokenID: string) => {\n      await approveNFT(nftTokenContract, exchangeNftAddress, tokenID)\n    },\n    [nftTokenContract, exchangeNftAddress],\n  )\n\n  const handleGetApproveNFT = useCallback(\n    async (tokenID: string) => {\n      const address = await getApproveNFT(nftTokenContract, tokenID)\n      return address\n    },\n    [nftTokenContract],\n  )\n\n  const handleBuyToken = useCallback(\n    async (tokenID: string) => {\n      const txHash = await buyToken(exchangeNftContract, tokenID)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleReadyToSellToken = useCallback(\n    async (tokenID: string, price: any) => {\n      const txHash = await readyToSellToken(\n        exchangeNftContract,\n        tokenID,\n        new BigNumber(price).times(BIG_TEN.pow(18)).toString(),\n      )\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleCancelSellToken = useCallback(\n    async (tokenID: string) => {\n      const txHash = await cancelSellToken(exchangeNftContract, tokenID)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleSetCurrentPrice = useCallback(\n    async (tokenID: string, price: BigNumber) => {\n      const txHash = await setCurrentPrice(exchangeNftContract, tokenID, price)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleGetAskLength = useCallback(async () => {\n    const txHash = await getAskLength(exchangeNftContract)\n    console.info(txHash)\n  }, [exchangeNftContract])\n\n  const handleGetAsks = useCallback(async () => {\n    const txHash = await getAsks(exchangeNftContract)\n    console.info(txHash)\n  }, [exchangeNftContract])\n\n  const handleGetAsksDesc = useCallback(async () => {\n    const txHash = await getAsksDesc(exchangeNftContract)\n    console.info(txHash)\n  }, [exchangeNftContract])\n\n  const handleGetAsksByPage = useCallback(\n    async (page, size) => {\n      const txHash = await getAsksByPage(exchangeNftContract, page, size)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleGetAsksByPageDesc = useCallback(\n    async (page, size) => {\n      const txHash = await getAsksByPageDesc(exchangeNftContract, page, size)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleGetAsksByUser = useCallback(\n    async (user) => {\n      const txHash = await getAsksByUser(exchangeNftContract, user)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  const handleGetAsksByUserDesc = useCallback(\n    async (user) => {\n      const txHash = await getAsksByUserDesc(exchangeNftContract, user)\n      console.info(txHash)\n    },\n    [exchangeNftContract],\n  )\n\n  return {\n    onApprove: handleApproveNFT,\n    onApproveMatchaToken: handleApproveMatchaToken,\n    onBuyToken: handleBuyToken,\n    onReadyToSellToken: handleReadyToSellToken,\n    onCancelSellToken: handleCancelSellToken,\n    onSetCurrentPrice: handleSetCurrentPrice,\n    onGetAskLength: handleGetAskLength,\n    onGetAsks: handleGetAsks,\n    onGetAsksDesc: handleGetAsksDesc,\n    onGetAsksByPage: handleGetAsksByPage,\n    onGetAsksByPageDesc: handleGetAsksByPageDesc,\n    onGetAsksByUser: handleGetAsksByUser,\n    onGetAsksByUserDesc: handleGetAsksByUserDesc,\n    onGetApproved: handleGetApproveNFT,\n    onGetApprovedMatchaToken: handleGetApproveMatchaToken,\n  }\n}\n\nexport default useExchangeNFT\n"],"sourceRoot":""}