{"version":3,"sources":["views/Pool/index.tsx"],"names":["Body","styled","CardBody","theme","isDark","StyledButton","Button","attrs","variant","scale","StyledButton2","a","StyledButton3","StyledText1","Text","StyledText2","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","useModal","id","as","Link","to","mt","color","textAlign","index","pair","mb","flexDirection","alignItems","href"],"mappings":"qUAiBMA,EAAOC,YAAOC,IAAPD,CAAgB,sGAEjB,YAAQ,SAALE,MAAmBC,OAAS,sCAAwC,+BAA+B,IAI5GC,EAAeJ,YAAOK,KAAQC,MAAM,CAAEC,QAAS,OAAQC,MAAO,MAA/CR,CAAsD,sYAkBrES,EAAgBT,IAAOU,EAAC,mNAWxBC,EAAgBX,IAAOU,EAAC,8LAUxBE,EAAcZ,YAAOa,KAAPb,CAAY,uIACrB,YAAQ,SAALE,MAAmBC,OAAS,UAAY,SAAS,IAMzDW,EAAcd,YAAOa,KAAPb,CAAY,mIACrB,YAAQ,SAALE,MAAmBC,OAAS,UAAY,SAAS,IAMhD,SAASY,IACtB,IAAQC,EAAYC,cAAZD,QACAE,EAAMC,cAAND,EAGFE,EAAoBC,cACpBC,EAAgCC,mBACpC,kBAAMH,EAAkBI,KAAI,SAACC,GAAM,MAAM,CAAEC,eAAgBC,YAAmBF,GAASA,SAAQ,GAAE,GACjG,CAACL,IAEGQ,EAAkBL,mBACtB,kBAAMD,EAA8BE,KAAI,SAACK,GAAK,OAAKA,EAAMH,cAAc,GAAC,GACxE,CAACJ,IAEH,EAAkDQ,YACzC,OAAPd,QAAO,IAAPA,SAAWe,EACXH,GACD,mBAHMI,EAAe,KAAEC,EAAsB,KAMxCC,EAA8BX,mBAClC,kBACED,EAA8Ba,QAAO,kBAAGT,EAAc,EAAdA,eAAc,OACb,QADa,EACpDM,EAAgBN,EAAeU,gBAAQ,aAAvC,EAAyCC,YAAY,IAAI,GAC1D,GACH,CAACf,EAA+BU,IAG5BM,EAAUC,YAASL,EAA4BV,KAAI,YAAS,SAANC,MAAmB,KACzEe,EACJP,IAAiC,OAAPK,QAAO,IAAPA,OAAO,EAAPA,EAASG,QAASP,EAA4BO,SAAiB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASI,MAAK,SAACC,GAAM,OAAMA,CAAM,KAE/GC,EAA0BN,EAAQd,KAAI,YAAQ,OAAR,iBAAQ,EAAU,IAAEW,QAAO,SAACU,GAAM,OAAqBC,QAAQD,EAAO,IA6BlH,EAA4BE,aAAS,cAAC,IAAa,KAAI,iBAA/B,GACxB,OACE,cAAC,IAAI,UACH,eAAC,IAAO,WAEN,cAAC3C,EAAY,CACX4C,GAAG,mBACHC,GAAIC,IACJC,GAAG,OACH,SAECjC,EAAE,mBAEL,cAACN,EAAW,UAAEM,EAAE,oBAChB,eAACnB,EAAI,CAACqD,GAAG,OAAM,UAxCdpC,EAGDwB,EAEA,cAAC,KAAI,CAACa,MAAM,OAAOC,UAAU,SAAQ,SACnC,cAAC,IAAI,UAAEpC,EAAE,gBAIY,OAAvB0B,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBH,QAAS,EAC7BG,EAAwBpB,KAAI,SAACqB,EAAQU,GAAK,OAC/C,cAAC,IAAgB,CAEfC,KAAMX,EACNY,GAAIF,EAAQX,EAAwBH,OAAS,EAAI,OAAS,GAFrDI,EAAOnB,eAAeU,QAG3B,IAIJ,cAACtB,EAAW,CAACuC,MAAM,OAAOC,UAAU,SAAQ,SACzCpC,EAAE,yBApBE,cAACJ,EAAW,UAAEI,EAAE,iDAyClBF,IAAYwB,GACX,eAAC,IAAI,CAACkB,cAAc,SAASC,WAAW,SAASP,GAAG,MAAK,UACvD,cAACtC,EAAW,CAACuC,MAAM,OAAOI,GAAG,MAAK,SAC/BvC,EAAE,kCAEL,cAACP,EAAa,CAACiD,KAAK,QAAO,SAAE1C,EAAE,gCAIrC,eAACJ,EAAW,WACTI,EAAE,gCACH,cAACT,EAAa,UAAES,EAAE,wBAK5B,C","file":"static/js/34.e208ec2c.chunk.js","sourcesContent":["import React, { useMemo,lazy } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from 'parsec-swap-sdk'\nimport { Text, Flex, CardBody, Button,useModal } from 'parsec-swap-uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppBody } from '../../components/App'\nimport Page from '../Page'\nimport SettingsModal from \"../../components/Settings/SettingsModal\"\n\nconst AddLiquidity = lazy(() => import('../AddLiquidity'))\nconst Body = styled(CardBody)`\n  background-color: transparent;\n  border: ${({ theme }) => (theme.isDark ? '1px dashed rgba(185, 185, 185, 0.5)' : '1px dashed rgba(0, 0, 0, 0.3)')};\n  border-radius: 32px;\n`\n\nconst StyledButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })`\n  background-image: linear-gradient(to left, #991cd1,#d4307a);\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  border-radius: 32px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 17px;\n  border: 1px solid transparent;\n  border-radius:32px;\n  display: table;\n  margin-top: 30px;\n  box-shadow: none;\n  &:hover {\n    opacity: 0.8;\n  }\n`\nconst StyledButton2 = styled.a`\n  background-color: transparent;\n  color: #d4307a;\n  font-weight: 400;\n  border: none;\n  font-size: 15px;\n  cursor: pointer;\n  margin-top: 20px;\n  text-decoration: underline;\n`\n\nconst StyledButton3 = styled.a`\n  background-color: transparent;\n  color: #d4307a;\n  font-weight: 600;\n  border: none;\n  font-size: 18px;\n  cursor: pointer;\n  text-decoration: underline;\n`\n\nconst StyledText1 = styled(Text)`\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#19274B')};\n  font-size: 15px;\n  font-weight: 600;\n  margin-top: 20px;\n  text-transform: uppercase;\n`\nconst StyledText2 = styled(Text)`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B9' : '#757D93')};\n  font-size: 16px;\n  font-weight: 500;\n  text-align: center;\n  padding: 0.5rem 0px;\n`\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return <StyledText2>{t('Connect to a wallet to view your liquidity.')}</StyledText2>\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"text\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <StyledText2 color=\"text\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </StyledText2>\n    )\n  }\n  \n  const [onPresentSettings] = useModal(<SettingsModal />);\n  return (\n    <Page>\n      <AppBody>\n        {/* <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} /> */}\n        <StyledButton\n          id=\"join-pool-button\"\n          as={Link}\n          to=\"/add\"\n          // startIcon={<AddIcon color=\"white\" />}\n        >\n          {t('Add Liquidity')}\n        </StyledButton>\n        <StyledText1>{t('Your liquidity')}</StyledText1>\n        <Body mt=\"20px\">\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"5px\">\n              <StyledText2 color=\"text\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </StyledText2>\n              <StyledButton3 href=\"/find\">{t('Find other LP tokens')}</StyledButton3>\n            </Flex>\n          )}\n        </Body>\n        <StyledText2>\n          {t(\"Don't see a pool you joined?\")}\n          <StyledButton2>{t(' Import it.')}</StyledButton2>\n        </StyledText2>\n      </AppBody>\n    </Page>\n  )\n}\n"],"sourceRoot":""}