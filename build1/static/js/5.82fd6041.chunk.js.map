{"version":3,"sources":["views/EarningFarms/EarningWalletConnected/components/EarningWalletTab.tsx","views/EarningFarms/hooks/useHarvestFarm.ts","views/EarningFarms/EarningWalletConnected/components/HarvestAction.tsx","views/EarningFarms/EarningWalletConnected/components/SelectedModalCard.tsx","views/EarningFarms/EarningWalletConnected/DepositModal.tsx","views/EarningFarms/EarningWalletConnected/WithdrawModal.tsx","views/EarningFarms/hooks/useUnstakeFarms.ts","views/EarningFarms/hooks/useStakeFarms.ts","views/EarningFarms/EarningWalletConnected/components/StakeAction.tsx","views/EarningFarms/hooks/useApproveFarm.ts","views/EarningFarms/EarningWalletConnected/components/SelectedModalCard1.tsx","views/EarningFarms/EarningWalletConnected/components/CardSelectedModal.tsx","views/EarningFarms/EarningWalletConnected/components/WalletCardItem.tsx","views/EarningFarms/EarningWalletConnected/EarningWalletConnected.tsx","state/farmPools/hooks.ts","utils/calls/farms.ts","utils/calls/pools.ts","utils/calls/nfts.ts","components/BaseLayout.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","utils/getLiquidityUrlPathParts.ts","utils/latinise.ts"],"names":["TabStatus","styled","ButtonMenuItem","theme","isActive","isDark","useHarvestFarm","pair","masterChefContract","useMasterchef","onReward","useCallback","harvestFarm","ActionButtonContainer","div","ActionButton","Button","HarvestAction","onDismiss","earnings","pid","account","useWeb3React","useToast","toastSuccess","toastError","t","useTranslation","useState","pendingTx","setPendingTx","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","disabled","eq","onClick","symbol","console","error","fetchFarmUserDataAsync","pids","Card","TokenImageContainer","TokenAmount","Earned","SelectedModalCard","earning","earningToken","toNumber","src","alt","StyledButton","StyledModal","Modal","StyledFilledButton","DepositModal","max","onConfirm","tokenName","addLiquidityUrl","val","setVal","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","value","replace","handleSelectMax","title","onSelectMax","onChange","inputTitle","variant","isFinite","gt","WithdrawModal","width","useUnstakeFarms","handleUnstake","amount","unstakeFarm","onUnstake","useStakeFarms","handleStake","stakeFarm","txHash","info","onStake","ActionPlusButton","IconButton","StakeAction","stakedBalance","tokenBalance","useModal","onPresentDeposit","onPresentWithdraw","style","marginRight","scale","color","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","SelectedModalCard1","farm","approved","setApproved","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","token","quoteToken","lpSymbol","ConnectWalletButton","ModalContainer","StyledCard","Row","Col","StyledHeader","TokenName","Description","LogoHeaderContent","CustomModal","earningsAsString","minWidth","textAlign","height","StyledCardTitle","StyledBorder","span","ColLeft","ColRight","StyledBadge","StyledBadgeStar","img","StyledTokenImage","StyledSelectButton","WalletCardItem","isLoading","useTheme","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","BASE_ADD_LIQUIDITY_URL","onCardClick","Math","round","apr","endIcon","spin","StyledFlexLayout","BaseLayout","StyledContent","Wrapper","StyledTitle","EarningWalletConnected","useFarms","farmsLP","data","userFarmDataLoaded","userDataLoaded","colaPrice","usePriceColaBusd","fastRefresh","useRefresh","useEffect","fetchPoolsUserDataAsync","useSelector","state","pools","farmPools","map","transformPool","useFarmPools","poolsWithoutAutoVault","TabHot","tabStatus","partition","pool","stakingToken","usePollFarmsData","slowRefresh","fetchPoolsPublicData","simpleRpcProvider","getBlockNumber","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsStakingLimitsAsync","useFetchPublicPoolsData","activeFarms","filter","multiplier","isArchivedPid","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","cakeRewardsApr","lpRewardsApr","liquidity","chosenFarmsMemoized","chosenFarms","TabEarnCola","TabColaStaking","TabNFT","TabOthers","TabEnded","options","gasLimit","DEFAULT_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","toString","deposit","withdraw","getActivePools","block","eligiblePools","sousId","isFinished","undefined","startBlockCalls","contractAddress","name","endBlockCalls","multicall","sousChefV2","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte","utils","parseEther","overrides","mintNFT","nftContract","tokenID","mint","burnNFT","burn","getTokenURI","tokenURI","uri","approveMatchaToken","matchaTokenContract","nftExchangeAddr","getApproveMatchaToken","owner","spender","approveNFT","originalNftContract","getApproveNFT","getApproved","buyToken","nftExchangeContract","readyToSellToken","price","cancelSellToken","setCurrentPrice","getAskLength","askLen","getAsks","getAsksDesc","getAsksByPage","page","size","getAsksByPageDesc","getAsksByUser","user","getAsksByUserDesc","GridLayout","Grid","StyledSpacer","props","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","text","StyledInput","Input","StyledErrorMessage","Text","StyledMaxButton","StyledText","StyledInputContainer","ModalInput","decimals","isBalanceZero","isWarning","justifyContent","fontSize","balance","balanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","display","alignItems","mr","bold","href","external","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","Latinise","latin_map","τ","Τ","latinise","input","x"],"mappings":"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","file":"static/js/5.82fd6041.chunk.js","sourcesContent":["// eslint-disable-next-line\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { ButtonMenu, ButtonMenuItem } from 'parsec-swap-uikit'\n\nconst StyledButtonMenuItem = styled(ButtonMenuItem)<{ isActive: boolean }>`\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 21px;\n  color: ${({ theme, isActive }) =>\n    isActive ? 'white' : theme.isDark ? 'rgba(185, 185, 185, 0.39)' : 'rgba(0, 0, 0, 0.39)'};\n`\n// const TabContainer = styled(ButtonMenu)`\n//   background: transparent;\n//   border: none;\n//   margin-top: 10px;\n//   margin-bottom: 10px;\n//   flex-wrap: wrap;\n//   justify-content: center;\n// `\n\n// const TabItem = styled(Text)<{ isActive: boolean }>`\n//   position: relative;\n//   color: ${({ isActive, theme }) =>\n//     theme.isDark ? (isActive ? '#959596' : '#4f5f6f') : isActive ? '#4f5f6f' : '#959596'};\n//   cursor: pointer;\n//   font-size: 22px;\n//   font-weight: bold;\n//   text-decoration: none;\n//   border-bottom: ${({ isActive, theme }) =>\n//     theme.isDark ? (isActive ? '4px solid #959596' : 'none') : isActive ? '4px solid #4f5f6f' : 'none'};\n//   white-space: nowrap;\n//   margin: 10px 30px;\n//   font-family: 'Roboto';\n// `\n\nconst tabBtnArray = [{ id: 0, btnName: 'Hot' }]\n\nexport enum TabStatus {\n  TabHot,\n  TabEarnCola,\n  TabColaStaking,\n  TabOthers,\n  TabNFT,\n  TabEnded,\n}\n\nexport const EarningWalletTab = ({ getCardCount }) => {\n  const { t } = useTranslation()\n\n  // const [tabId, setTabIndex] = useState(0)\n\n  const [tabId, setTabIndex] = React.useState(0)\n\n  const handleClickTab = (newIndex) => {\n    setTabIndex(newIndex)\n    if (newIndex === 0) {\n      getCardCount(TabStatus.TabHot)\n    } else if (newIndex === 1) {\n      getCardCount(TabStatus.TabEarnCola)\n    } else if (newIndex === 2) {\n      getCardCount(TabStatus.TabColaStaking)\n    }\n  }\n\n  return (\n    <ButtonMenu activeIndex={tabId} onItemClick={handleClickTab}>\n      {tabBtnArray.map((tabBtn) => (\n        <StyledButtonMenuItem key={tabBtn.id} isActive={tabBtn.id === tabId}>\n          {t(`${tabBtn.btnName}`)}\n        </StyledButtonMenuItem>\n      ))}\n    </ButtonMenu>\n  )\n}\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (pair: string) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, pair)\n  }, [pair, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from 'parsec-swap-uikit'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n// import { usePriceColaBusd } from 'state/farms/hooks'\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\ninterface FarmCardActionsProps {\n  onDismiss?: () => void\n  earnings?: BigNumber\n  pair?: string\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ onDismiss, earnings, pair, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pair)\n  // const cakePrice = usePriceColaBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  // const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  // const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <ActionButtonContainer>\n      <ActionButton\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MOS' }),\n            )\n            onDismiss()\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </ActionButton>\n    </ActionButtonContainer>\n  )\n}\n\nexport default HarvestAction\n","// eslint-disable-next-line\nimport React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport HarvestAction from './HarvestAction'\n\nconst Card = styled.div`\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#141436` : `#FFFFFF`)};\n  border-radius: 10px;\n  width: 321px;\n  position: relative;\n  color: rgb(197, 133, 96);\n  text-align: center;\n  padding: 19px 15px 25px 15px;\n  @media screen and (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nconst TokenImageContainer = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 75px;\n    width: 75px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n`\n\nconst TokenAmount = styled.div`\n  box-sizing: border-box;\n  margin: 16px 0px 7px 0px;\n  min-width: 0px;\n  font-weight: 500;\n  font-size: 40px;\n  line-height: 48px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst Earned = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n  box-sizing: border-box;\n  margin-top: 8px;\n  min-width: 0px;\n  font-size: 16px;\n  font-weight: 600;\n`\n\nconst SelectedModalCard: React.FC<{\n  onDismiss: () => void\n  earning: BigNumber\n  pid: number\n  pair: string\n  earningToken: string\n}> = ({ onDismiss, earning, pid, pair, earningToken }) => {\n  const { account } = useWeb3React()\n  const rawEarningsBalance = account ? getBalanceAmount(earning).toNumber() : 0\n\n  return (\n    <Card>\n      <TokenImageContainer>\n        <img src=\"images/earning/cola.png\" alt=\"token icon\" />\n      </TokenImageContainer>\n      <TokenAmount>{rawEarningsBalance}</TokenAmount>\n      <Earned>{earningToken}</Earned>\n      <HarvestAction onDismiss={onDismiss} earnings={earning} pid={pid} pair={pair} />\n    </Card>\n  )\n}\n\nexport default SelectedModalCard\n","import BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'parsec-swap-uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\nconst StyledButton = styled(Button)`\n  width: 100%;\n  height: 36px;\n  border-radius: 10px;\n`\nconst StyledModal = styled(Modal)`\n  background-color: ${({ theme }) => (theme.isDark ? `#141C23` : `#f0f3f6`)};\n\n  @media screen and (max-width: 600px) {\n    min-width: 370px;\n    width: 95%;\n  }\n`\n\nconst StyledFilledButton = styled(Button)`\n  background-color: ${({ theme }) => (theme.isDark ? '#44a574' : '#85ce36')};\n  color: white;\n  font-weight: 400;\n  padding: 0px;\n  width: 100%;\n  height: 36px;\n  border-radius: 10px;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <StyledModal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <StyledButton variant=\"secondary\" onClick={onDismiss} disabled={pendingTx}>\n          {t('Cancel')}\n        </StyledButton>\n        <StyledFilledButton\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </StyledFilledButton>\n      </ModalActions>\n    </StyledModal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'parsec-swap-uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\nconst StyledButton = styled(Button)`\n  width: 100%;\n  height: 36px;\n  border-radius: 10px;\n`\n\nconst StyledModal = styled(Modal)`\n  background-color: ${({ theme }) => (theme.isDark ? `#141C23` : `#f0f3f6`)};\n\n  @media screen and (max-width: 600px) {\n    min-width: 370px;\n    width: 95%;\n  }\n`\n\nconst StyledFilledButton = styled(Button)`\n  background-color: ${({ theme }) => (theme.isDark ? '#44a574' : '#85ce36')};\n  color: white;\n  font-weight: 400;\n  padding: 0px;\n  width: 100%;\n  height: 36px;\n  border-radius: 10px;\n`\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <StyledModal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <StyledButton variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </StyledButton>\n        <StyledFilledButton\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </StyledFilledButton>\n      </ModalActions>\n    </StyledModal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: string) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pair: string) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pair, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pair],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, IconButton, AddIcon, useModal } from 'parsec-swap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\n// import { useLpTokenPrice } from 'state/farms/hooks'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pair?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\nconst ActionPlusButton = styled(IconButton)`\n  background-color: ${({ theme }) => (theme.isDark ? '#44a574' : '#85ce36')};\n  color: ${({ theme }) => (theme.isDark ? '#221d1d' : '#221d1d')};\n  font-weight: 400;\n  padding: 0px;\n  width: 100%;\n  height: 50px;\n  margin-left: 10px !important;\n  border-radius: 10px;\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pair,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pair)\n  const { onUnstake } = useUnstakeFarms(pair)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  // const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  // const displayBalance = useCallback(() => {\n  //   const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n  //   if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n  //     return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n  //   }\n  //   if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n  //     return getFullDisplayBalance(stakedBalance).toLocaleString()\n  //   }\n  //   return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  // }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <ActionButtonContainer>\n        <ActionButton onClick={onPresentDeposit}>{t('Stake LP')}</ActionButton>\n      </ActionButtonContainer>\n    ) : (\n      <ActionButtonContainer>\n        <ActionButton onClick={onPresentWithdraw} style={{ marginRight: '5px' }}>\n          {t('UnStake')}\n        </ActionButton>\n        {/* <IconButton variant=\"tertiary\" scale=\"sm\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton> */}\n        <ActionPlusButton variant=\"tertiary\" scale=\"sm\" onClick={onPresentDeposit}>\n          <AddIcon color=\"white\" width=\"30px\" />\n        </ActionPlusButton>\n      </ActionButtonContainer>\n    )\n  }\n\n  return <>{renderStakingButtons()}</>\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","// eslint-disable-next-line\nimport React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { Button } from 'parsec-swap-uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Card = styled.div`\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#141436` : `#FFFFFF`)};\n  border-radius: 10px;\n  width: 321px;\n  position: relative;\n  color: rgb(197, 133, 96);\n  text-align: center;\n  padding: 19px 15px 25px 15px;\n  @media screen and (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nconst TokenImageContainer = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 75px;\n    width: 75px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n    display: inline !important;\n  }\n`\n\nconst TokenAmount = styled.div`\n  box-sizing: border-box;\n  margin: 16px 0px 7px 0px;\n  min-width: 0px;\n  font-weight: 500;\n  font-size: 40px;\n  line-height: 48px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst Earned = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n  box-sizing: border-box;\n  margin-top: 8px;\n  min-width: 0px;\n  font-size: 16px;\n  font-weight: 600;\n`\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\nconst SelectedModalCard1: React.FC<{ farm: FarmWithStakedValue; account?: string; addLiquidityUrl?: string }> = ({\n  farm,\n  account,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const [approved, setApproved] = useState(false)\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n  } = farm.userData || {}\n\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n  \n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n      setApproved(true)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved || approved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pair={getAddress(farm.lpAddresses)}\n        pid={farm.pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <ActionButtonContainer>\n        <ActionButton disabled={requestedApproval} onClick={handleApprove}>\n          {t('Approve')}\n        </ActionButton>\n      </ActionButtonContainer>\n    )\n  }\n\n  return (\n    <Card>\n      <TokenImageContainer>\n        <img src={`/images/tokens/${getAddress(farm.token.address)}.png`} alt=\"card-logo\" />\n        <img src={`/images/tokens/${getAddress(farm.quoteToken.address)}.png`} alt=\"card-logo\" />\n        {/* <img src={`/images/earning/${lpAddress}.png`} alt=\"LP Token\" /> */}\n      </TokenImageContainer>\n      <TokenAmount>{getBalanceAmount(stakedBalance).toNumber()}</TokenAmount>\n      <Earned>{farm.lpSymbol + t(' Staked')}</Earned>\n\n      {!account ? <ConnectWalletButton scale=\"sm\" /> : renderApprovalOrStakeButton()}\n    </Card>\n  )\n}\n\nexport default SelectedModalCard1\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { ModalContainer, InjectedModalProps, ModalCloseButton } from 'parsec-swap-uikit'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport SelectedModalCard from './SelectedModalCard'\nimport SelectedModalCard1 from './SelectedModalCard1'\n// import TopStakers from './TopStakers'\n\nconst StyledModal = styled(ModalContainer)`\n  border: none;\n  box-shadow: none;\n  background-color: ${({ theme }) => (theme.isDark ? `#030923` : `#F0F2FA`)};\n  position: relative;\n  border: white;\n  padding: 50px;\n  overflow: auto;\n  max-width: 840px;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  .cancel {\n    width: 30px;\n    height: 30px;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n  @media screen and (max-width: 940px) {\n    width: 90%;\n  }\n`\n\nconst StyledCard = styled.div`\n  position: relative;\n  justify-content: center;\n  & Button {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  & img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 0px;\n  }\n`\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: 24px;\n  @media screen and (max-width: 940px) {\n    flex-direction: column;\n    margin-bottom: 0;\n  }\n`\n\nconst Col = styled.div`\n  text-align: center;\n  margin: 0 20px;\n  @media screen and (max-width: 940px) {\n    margin: 12px auto;\n  }\n  @media screen and (max-width: 480px) {\n    margin: 12px 0;\n  }\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#ccccd2' : '#4f5f6f')};\n  text-align: center;\n  margin-bottom: 50px;\n`\n\nconst TokenName = styled.div`\n  box-sizing: border-box;\n  font-weight: 600;\n  font-size: 35px;\n  line-height: 32px;\n  margin: 0px;\n  min-width: 0px;\n  margin-top: 18px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#19274B')};\n`\n\nconst Description = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B9' : '#19274B')};\n  box-sizing: border-box;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 28px;\n  margin: 0px;\n  margin-top: 22px;\n  min-width: 0px;\n`\nconst LogoHeaderContent = styled.div`\n  display: inline-flex;\n`\n\ninterface CurrencySearchModalProps extends InjectedModalProps {\n  farm: FarmWithStakedValue\n  earningToken: string\n  account?: string\n  addLiquidityUrl?: string\n}\n\nexport default function CustomModal({\n  onDismiss = () => null,\n  farm,\n  earningToken,\n  account,\n  addLiquidityUrl,\n}: CurrencySearchModalProps) {\n  const { pid, lpAddresses } = farm\n  const { earnings: earningsAsString = 0 } = farm.userData || {}\n\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  return (\n    <StyledModal minWidth=\"370px\">\n      <div style={{ textAlign: 'end' }}>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </div>\n      <StyledCard>\n        <StyledHeader>\n          <LogoHeaderContent>\n            <img\n              src={`/images/tokens/${getAddress(farm.token.address)}.png`}\n              style={{ height: '68px' }}\n              alt=\"card-logo\"\n            />\n            <img\n              src={`/images/tokens/${getAddress(farm.quoteToken.address)}.png`}\n              style={{ height: '68px' }}\n              alt=\"card-logo\"\n            />\n          </LogoHeaderContent>\n          {/* <img src={`/images/earning/${lpAddress}.png`} style={{ height: '68px' }} alt=\"LP Token\" /> */}\n          <TokenName>{farm.lpSymbol}</TokenName>\n          <Description>\n            Deposit {farm.lpSymbol} Tokens and earn {earningToken}\n          </Description>\n        </StyledHeader>\n        <Row>\n          <Col>\n            <SelectedModalCard\n              onDismiss={onDismiss}\n              earning={earnings}\n              pid={pid}\n              pair={lpAddress}\n              earningToken={earningToken}\n            />\n          </Col>\n          <Col>\n            <SelectedModalCard1 farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n          </Col>\n        </Row>\n      </StyledCard>\n    </StyledModal>\n  )\n}\n","// eslint-disable-next-line\n\nimport React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, useModal, AutoRenewIcon } from 'parsec-swap-uikit'\n\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\n\nimport CardSelectedModal from './CardSelectedModal'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled.div`\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#141436` : `rgb(255, 253, 250);`)};\n  border-radius: 10px;\n  position: relative;\n  width: 321px;\n  margin-bottom: 24px;\n  padding: 19px 15px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n`\n\nconst StyledCardTitle = styled.div`\n  text-align: center;\n  margin: 18px 0 15px 0;\n  white-space: nowrap;\n  box-sizing: border-box;\n  min-width: 0px;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  white-space: break-spaces;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 4px;\n  padding: 12px 0px;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 120%;\n`\nconst StyledBorder = styled.span`\n  background: rgba(0, 0, 0, 0.1);\n  height: 1px;\n  display: block;\n`\n\nconst ColLeft = styled.div`\n  text-align: left;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n`\nconst ColRight = styled.div`\n  text-align: right;\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n`\n\nconst StyledBadge = styled.div`\n  position: absolute;\n  top: -4px;\n  right: 25px;\n  width: 30px;\n  height: 40px;\n  background: url(/images/earning/mark.svg);\n  background-repeat: no-repeat;\n  background-position: center top;\n`\n\nconst StyledBadgeStar = styled.img`\n  filter: ${({ theme }) =>\n    theme.isDark\n      ? `brightness(5) contrast(5) hue-rotate(217deg) saturate(9.9)`\n      : `brightness(5) contrast(5) hue-rotate(217deg) saturate(9.9)`};\n  position: absolute;\n  top: 7px;\n  right: 5px;\n`\n\nconst StyledTokenImage = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 76.5px;\n    width: 76.5px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n`\n\nconst StyledSelectButton = styled(Button)`\n  background-image: linear-gradient(to left, #991cd1,#d4307a);\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  border-radius: 32px;\n  text-align: center;\n  border: 1px solid transparent;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  letter-spacing: 0.01em;\n  text-transform: none;\n  height: fit-content;\n  margin: 0px !important;\n  box-shadow: none;\n`\n\nconst WalletCardItem: React.FC<{\n  farm: FarmWithStakedValue\n  earningToken: string\n  account?: string\n  isLoading: boolean\n}> = ({ farm, earningToken, account, isLoading }) => {\n  const theme = useTheme()\n  const { t } = useTranslation()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  // roi={roi}\n  const [onCardClick] = useModal(\n    <CardSelectedModal farm={farm} earningToken={earningToken} account={account} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  return (\n    <StyledCard>\n      <StyledBadge>\n        <StyledBadgeStar\n          src={theme.isDark ? 'images/earning/icon_star.svg' : 'images/earning/icon_star_white.svg'}\n          alt=\"card-logo\"\n        />\n      </StyledBadge>\n      <StyledTokenImage>\n        <img src={`/images/tokens/${getAddress(farm.token.address)}.png`} alt=\"card-logo\" />\n        <img src={`/images/tokens/${getAddress(farm.quoteToken.address)}.png`} alt=\"card-logo\" />\n        {/* <img src={`images/earning/${getAddress(farm.lpAddresses)}.png`} alt=\"LP Token\" /> */}\n      </StyledTokenImage>\n\n      <StyledCardTitle>\n        {t(`${farm.lpSymbol}`)} to {t(`${earningToken}`)}\n      </StyledCardTitle>\n      <Row>\n        <ColLeft>{t('Stake')}</ColLeft>\n        <ColRight>{t(`${farm.lpSymbol}`)}</ColRight>\n      </Row>\n      <StyledBorder />\n      <Row>\n        <ColLeft>{t('Earn')}</ColLeft>\n        <ColRight>{t(`${earningToken}`)}</ColRight>\n      </Row>\n      <StyledBorder />\n      <Row>\n        <ColLeft>{t('APR')}</ColLeft>\n        <ColRight>{t(`${Math.round(farm.apr * 100000) / 100000}`)}</ColRight>\n      </Row>\n      <StyledSelectButton\n        onClick={onCardClick}\n        isLoading={isLoading}\n        endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {isLoading ? 'Loading' : 'Select'}\n      </StyledSelectButton>\n    </StyledCard>\n  )\n}\n\nexport default WalletCardItem\n","import React, { useState, useCallback, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useFarms, usePollFarmsData, usePriceColaBusd } from 'state/farms/hooks'\n// import { useFetchPublicPoolsData, usePools, useCakeVault } from 'state/pools/hooks'\nimport { useFetchPublicPoolsData } from 'state/farmPools/hooks'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\n// import { Farm, Pool } from 'state/types'\nimport { Farm } from 'state/types'\nimport { getFarmApr } from 'utils/apr'\n// import { orderBy, partition } from 'lodash'\nimport { partition } from 'lodash'\n\nimport { TabStatus, EarningWalletTab } from './components/EarningWalletTab'\nimport WalletCardItem, { FarmWithStakedValue } from './components/WalletCardItem'\nimport PoolCardItem from './components/Pool/PoolCardItem'\nimport BaseLayout from '../../../components/BaseLayout'\n// import { getAprData, getCakeVaultEarnings } from './helpers'\nimport { useFarmPools } from '../../../state/farmPools/hooks'\n\nconst StyledFlexLayout = styled(BaseLayout)`\n  justify-content: center;\n  margin: 24px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0 20px;\n`\n\nconst StyledContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding-top: 30px;\n  -webkit-box-align: center;\n  align-items: center;\n  flex: 1 1 0%;\n  overflow: hidden auto;\n  z-index: 1;\n  min-height: calc(100vh - 64px);\n  // background-color: ${({ theme }) => (theme.isDark ? '#141c23' : '#cfcfcf')};\n  background-size: 150%;\n  // background: black;\n  background-repeat: no-repeat;\n  background-position: center;\n   background:#030923;\n`\n\nconst StyledTitle = styled.div`\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  font-weight: 700;\n  font-size: 25px;\n  line-height: 30px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#171717')};\n  padding: 10px 0;\n  margin-bottom: 20px;\n`\n\nconst EarningWalletConnected = () => {\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded: userFarmDataLoaded } = useFarms()\n  const colaPrice = usePriceColaBusd()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded: userPoolDataLoaded } = useFarmPools(account)\n  const [tabStatus, setTabStatus] = useState(TabStatus.TabHot)\n  // const [sortOption, setSortOption] = useState('hot')\n\n  // const {\n  //   userData: { cakeAtLastUserAction, userShares },\n  //   fees: { performanceFee },\n  //   pricePerFullShare,\n  //   totalCakeInVault,\n  // } = useCakeVault()\n  // const accountHasVaultShares = userShares && userShares.gt(0)\n  // const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  const [stakeColaPools] = useMemo(() => partition(pools, (pool) => pool.stakingToken.symbol !== ''), [pools])\n  const [earnColaPools] = useMemo(() => partition(pools, (pool) => pool.earningToken.symbol === ''), [pools])\n\n  usePollFarmsData(false)\n  useFetchPublicPoolsData()\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n\n  const isActive = true\n  const query = ''\n  // const [query, setQuery] = useState('')\n  // const [isActive, setActive] = useState(true)\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const lpAddress = getAddress(farm.lpAddresses)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), colaPrice, totalLiquidity, lpAddress)\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        // const lowercaseQuery = latinise(query.toLowerCase())\n        const lowercaseQuery = latinise(query)\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [colaPrice, query, isActive],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    // const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    //   switch (sortOption) {\n    //     case 'apr':\n    //       return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n    //     case 'multiplier':\n    //       return orderBy(\n    //         farms,\n    //         (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n    //         'desc',\n    //       )\n    //     case 'earned':\n    //       return orderBy(\n    //         farms,\n    //         (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n    //         'desc',\n    //       )\n    //     case 'liquidity':\n    //       return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n    //     default:\n    //       return farms\n    //   }\n    // }\n\n    switch (tabStatus) {\n      case TabStatus.TabHot:\n        chosenFarms = farmsList(activeFarms)\n        break\n      case TabStatus.TabEarnCola:\n        break\n      case TabStatus.TabColaStaking:\n        break\n      case TabStatus.TabNFT:\n        break\n      case TabStatus.TabOthers:\n        break\n      case TabStatus.TabEnded:\n        break\n      default:\n        break\n    }\n\n    // return sortFarms(chosenFarms)\n    return chosenFarms\n  }, [activeFarms, farmsList, tabStatus])\n  // }, [sortOption, activeFarms, farmsList, tabStatus])\n\n  const chosenPoolsMemoized = useMemo(() => {\n    let chosenPools\n    // const sortPools = (poolsToSort: Pool[]): Pool[] => {\n    //   switch (sortOption) {\n    //     case 'apr':\n    //       // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n    //         'desc',\n    //       )\n    //     case 'earned':\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => {\n    //           if (!pool.userData || !pool.earningTokenPrice) {\n    //             return 0\n    //           }\n    //           return pool.isAutoVault\n    //             ? getCakeVaultEarnings(\n    //                 account,\n    //                 cakeAtLastUserAction,\n    //                 userShares,\n    //                 pricePerFullShare,\n    //                 pool.earningTokenPrice,\n    //               ).autoUsdToDisplay\n    //             : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n    //         },\n    //         'desc',\n    //       )\n    //     case 'totalStaked':\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n    //         'desc',\n    //       )\n    //     default:\n    //       return poolsToSort\n    //   }\n    // }\n    // chosenPools = []\n\n    switch (tabStatus) {\n      case TabStatus.TabHot:\n        // chosenPools = stakeColaPools\n        break\n      case TabStatus.TabEarnCola:\n        break\n      case TabStatus.TabColaStaking:\n        break\n      case TabStatus.TabNFT:\n        break\n      case TabStatus.TabOthers:\n        break\n      case TabStatus.TabEnded:\n        break\n      default:\n        break\n    }\n\n    // return sortPools(chosenPools)\n    return chosenPools\n  }, [\n    // sortOption,\n    // pools,\n    // account,\n    // cakeAtLastUserAction,\n    // performanceFeeAsDecimal,\n    // pricePerFullShare,\n    // totalCakeInVault,\n    // userShares,\n    tabStatus,\n    // stakeColaPools,\n  ])\n\n  const callback = (status) => {\n    setTabStatus(status)\n  }\n\n  return (\n    <Wrapper>\n      <StyledContent>\n        <StyledTitle>{t('Earning')}</StyledTitle>\n\n        {/* <EarningWalletTab getCardCount={callback} /> */}\n\n        <StyledFlexLayout>\n          {chosenFarmsMemoized.map((farm) => (\n            <WalletCardItem\n              key={farm.pid}\n              farm={farm}\n              earningToken=\"MOS\"\n              account={account}\n              isLoading={!userFarmDataLoaded}\n            />\n          ))}\n          {/* {chosenPoolsMemoized.map((pool) => (\n            <PoolCardItem key={pool.sousId} pool={pool} account={account} isLoading={!userPoolDataLoaded} />\n          ))} */}\n        </StyledFlexLayout>\n      </StyledContent>\n    </Wrapper>\n  )\n}\n\nexport default EarningWalletConnected\n","import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  fetchPoolsStakingLimitsAsync,\n} from '.'\nimport { State, Pool } from '../types'\nimport { transformPool } from './helpers'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh])\n}\n\nexport const useFarmPools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.farmPools.data,\n    userDataLoaded: state.farmPools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.deposit(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const unstakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.withdraw(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const harvestFarm = async (masterChefContract, pair) => {\n  const tx = await masterChefContract.deposit(pair, '0', options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport pools from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = pools\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","import { DEFAULT_GAS_LIMIT } from 'config'\nimport { ethers } from 'ethers'\n\nconst options = {\n  gasLimit: ethers.utils.parseEther('0.0000000000003'),\n}\n\nconst overrides = {\n  value: ethers.utils.parseEther('0.1'),\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const mintNFT = async (nftContract, tokenID) => {\n  const tx = await nftContract.mint(tokenID, overrides)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const burnNFT = async (nftContract, address, tokenID) => {\n  const tx = await nftContract.burn(address, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getTokenURI = async (nftContract, address, tokenID) => {\n  const uri = await nftContract.tokenURI(tokenID)\n  return uri\n}\n\n// Exchange\nexport const approveMatchaToken = async (matchaTokenContract, nftExchangeAddr, amount) => {\n  const tx = await matchaTokenContract.approve(nftExchangeAddr, amount, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveMatchaToken = async (matchaTokenContract, owner, spender) => {\n  const value = await matchaTokenContract.allowance(owner, spender)\n  return value\n}\n\nexport const approveNFT = async (originalNftContract, nftExchangeAddr, tokenID) => {\n  const tx = await originalNftContract.approve(nftExchangeAddr, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveNFT = async (originalNftContract, tokenID) => {\n  const address = await originalNftContract.getApproved(tokenID)\n  return address\n}\n\nexport const buyToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.buyToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const readyToSellToken = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.readyToSellToken(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const cancelSellToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.cancelSellToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const setCurrentPrice = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.setCurrentPrice(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getAskLength = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAskLength()\n  return askLen\n}\n\nexport const getAsks = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsks()\n  return askLen\n}\n\nexport const getAsksDesc = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsksDesc()\n  return askLen\n}\n\nexport const getAsksByPage = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPage(page, size)\n  return askLen\n}\n\nexport const getAsksByPageDesc = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPageDesc(page, size)\n  return askLen\n}\n\nexport const getAsksByUser = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUser(user)\n  return askLen\n}\n\nexport const getAsksByUserDesc = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUserDesc(user)\n  return askLen\n}\n","import styled from 'styled-components'\nimport { Grid } from 'parsec-swap-uikit'\n\nconst GridLayout = styled(Grid)`\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 16px;\n  @media screen and (min-width: 660px) {\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 24px;\n  }\n  @media screen and (min-width: 1260px) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 24px;\n  }\n`\n\nexport default GridLayout\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'parsec-swap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#030923` : `rgb(255, 253, 250)`)};\n  border-radius: 10px;\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px;\n  width: 100%;\n  margin-bottom: 8px;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: auto;\n  margin: 0 8px;\n  padding: 0 8px;\n  border-radius: 10px;\n  height: 32px;\n  background-color: ${({ theme }) => (theme.isDark ? `#141C23` : `#f0f3f6`)};\n  @media screen and (max-width: 600px) {\n    width: 100%;\n    margin: 8px 0;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  color: ${({ theme }) => (theme.isDark ? 'rgb(255, 205, 132)' : 'rgb(114, 47, 13)')};\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst StyledMaxButton = styled(Button)`\n  background-color: ${({ theme }) => (theme.isDark ? '#44a574' : '#85ce36')};\n  color: white;\n  margin-top: 16px;\n  font-weight: 400;\n  padding: 0px;\n  width: 110px;\n  height: 32px;\n  border-radius: 10px;\n  box-shadow: none;\n`\n\nconst StyledText = styled(Text)`\n  color: ${({ theme }) => (theme.isDark ? '#ccccd2' : '#4f5f6f')};\n`\n\nconst StyledInputContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  flex-direction: row;\n  justify-content: space-around;\n  @media screen and (max-width: 600px) {\n    flex-direction: column;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\">\n          <StyledText fontSize=\"14px\">{inputTitle}</StyledText>\n          <StyledText fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</StyledText>\n        </Flex>\n        <StyledInputContainer>\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <div style={{ display: 'flex', alignItems: 'flex-end' }}>\n            <StyledMaxButton onClick={onSelectMax} mr=\"8px\">\n              {t('Max')}\n            </StyledMaxButton>\n            <StyledText fontSize=\"16px\">{symbol}</StyledText>\n          </div>\n        </StyledInputContainer>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external>\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </>\n  )\n}\n\nexport default ModalInput\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'PSC' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'PSC' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n"],"sourceRoot":""}