{"version":3,"sources":["views/EarningPools/EarningWalletConnected/components/EarningWalletTab.tsx","views/EarningPools/hooks/useHavestPool.ts","views/EarningPools/hooks/useStakePool.ts","views/EarningPools/EarningWalletConnected/components/Pool/Actions/PoolHavestAction.tsx","views/EarningPools/EarningWalletConnected/components/Pool/PoolHavestCard.tsx","views/EarningPools/EarningWalletConnected/components/Pool/Modals/NotEnoughTokensModal.tsx","views/EarningPools/EarningWalletConnected/components/Pool/Modals/PercentageButton.tsx","views/EarningPools/hooks/useUnstakePool.ts","views/EarningPools/EarningWalletConnected/components/Pool/Modals/StakeModal.tsx","views/EarningPools/EarningWalletConnected/components/Pool/Actions/PoolStakeAction.tsx","views/EarningPools/EarningWalletConnected/components/Pool/PoolStakeCard.tsx","views/EarningPools/hooks/useApprovePool.ts","views/EarningPools/EarningWalletConnected/components/Pool/PoolCardSelectedModal.tsx","views/EarningPools/EarningWalletConnected/components/Pool/PoolCardItem.tsx","views/EarningPools/EarningWalletConnected/EarningWalletConnected.tsx","state/pools/hooks.ts","utils/calls/farms.ts","utils/calls/pools.ts","utils/calls/nfts.ts","components/BaseLayout.tsx","utils/latinise.ts","hooks/useLastUpdated.ts"],"names":["TabStatus","styled","ButtonMenuItem","theme","isActive","isDark","options","gasLimit","DEFAULT_GAS_LIMIT","harvestPool","sousChefContract","deposit","tx","wait","receipt","status","harvestPoolBnb","value","useHarvestPool","sousId","isUsingBnb","dispatch","useAppDispatch","useWeb3React","account","useSousChef","masterChefContract","useMasterchef","handleHarvest","useCallback","harvestFarm","updateUserPendingReward","updateUserBalance","onReward","sousStake","amount","decimals","BigNumber","times","BIG_TEN","pow","toString","sousStakeBnb","console","log","DEFAULT_TOKEN_DECIMAL","useStakePool","handleStake","stakeFarm","updateUserStakedBalance","onStake","ActionButtonContainer","div","ActionButton","Button","PoolHavestAction","onDismiss","earnings","earningToken","isBnbPool","t","useTranslation","fullBalance","getFullDisplayBalance","hasEarnings","toNumber","isCompoundPool","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","handleHarvestConfirm","symbol","error","disabled","onClick","isLoading","endIcon","spin","color","style","verticalAlign","StyledCard","TokenImageContainer","TokenAmount","Earned","PoolHavestCard","earning","pool","poolCategory","PoolCategory","BINANCE","src","getAddress","address","alt","Math","round","getBalanceAmount","StyledLink","Link","StyledButton","StyledButton1","NotEnoughTokensModal","tokenSymbol","title","bold","mt","href","variant","width","external","ml","PercentageButton","children","scale","mx","p","sousUnstake","withdraw","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","onUnstake","StyledInput","BalanceInput","mediaQueries","xs","sm","StyledModal","Modal","StakeModal","stakingTokenBalance","stakingTokenPrice","isRemovingStake","stakingToken","userData","stakingLimit","useTheme","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","formatNumber","useEffect","fullDecimalStakeAmount","getDecimalAmount","plus","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","handleConfirmClick","headerBackground","colors","gradients","cardHeader","mb","textAlign","fontSize","token","alignItems","justifyContent","minWidth","height","onUserInput","input","currencyValue","isWarning","balance","parseFloat","ActionPlusButton","IconButton","PoolStakeAction","isStaked","isFinished","useModal","onPresentTokenRequired","onPresentStake","onPresentUnstake","useTooltip","placement","targetRef","tooltip","tooltipVisible","reachStakingLimit","gte","flexDirection","marginRight","ref","Card","PoolStakeCard","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","isApproved","setIsApproved","isAppr","isGreaterThan","lpContract","earningTokenSymbol","requestedApproval","setRequestedApproval","approved","setapproved","handleApprove","approve","ethers","constants","MaxUint256","updateUserAllowance","useApprovePool","useERC20","ConnectWalletButton","ModalContainer","Row","Col","StyledHeader","TokenName","Description","StyledTokenImage","img","CustomModal","pendingReward","earningsAsString","display","StyledCardTitle","StyledBorder","span","ColLeft","ColLeftMin","ColRight","ColRightMin","StyledBadge","StyledBadgeStar","StyledSelectButton","PoolCardItem","onCardClick","apr","totalStaked","endBlock","StyledFlexLayout","BaseLayout","StyledContent","Wrapper","StyledTitle","EarningWalletConnected","useFarms","farmsLP","data","colaPrice","userDataLoaded","usePriceColaBusd","fastRefresh","useRefresh","fetchPoolsUserDataAsync","useSelector","state","pools","map","transformPool","usePools","poolsWithoutAutoVault","userPoolDataLoaded","TabColaStaking","tabStatus","Number","useMemo","partition","stakeColaPools","earnColaPools","usePollFarmsData","slowRefresh","fetchPoolsPublicData","simpleRpcProvider","getBlockNumber","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsStakingLimitsAsync","useFetchPublicPoolsData","activeFarms","filter","farm","pid","multiplier","isArchivedPid","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","lpAddress","lpAddresses","getFarmApr","poolWeight","cakeRewardsApr","lpRewardsApr","liquidity","chosenFarms","TabHot","TabEarnCola","TabNFT","TabOthers","TabEnded","chosenPools","pair","getActivePools","block","eligiblePools","undefined","startBlockCalls","contractAddress","name","endBlockCalls","multicall","sousChefV2","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","lte","utils","parseEther","overrides","mintNFT","nftContract","tokenID","mint","burnNFT","burn","getTokenURI","tokenURI","uri","approveMatchaToken","matchaTokenContract","nftExchangeAddr","getApproveMatchaToken","owner","spender","approveNFT","originalNftContract","getApproveNFT","getApproved","buyToken","nftExchangeContract","readyToSellToken","price","cancelSellToken","setCurrentPrice","getAskLength","askLen","getAsks","getAsksDesc","getAsksByPage","page","size","getAsksByPageDesc","getAsksByUser","user","getAsksByUserDesc","GridLayout","Grid","Latinise","latin_map","τ","Τ","latinise","replace","x","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated"],"mappings":"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","file":"static/js/6.b01f05c7.chunk.js","sourcesContent":["// eslint-disable-next-line\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { ButtonMenu, ButtonMenuItem } from 'parsec-swap-uikit'\n\nconst StyledButtonMenuItem = styled(ButtonMenuItem)<{ isActive: boolean }>`\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 21px;\n  color: ${({ theme, isActive }) =>\n    isActive ? 'white' : theme.isDark ? 'rgba(185, 185, 185, 0.39)' : 'rgba(0, 0, 0, 0.39)'};\n`\n// const TabContainer = styled(ButtonMenu)`\n//   background: transparent;\n//   border: none;\n//   margin-top: 10px;\n//   margin-bottom: 10px;\n//   flex-wrap: wrap;\n//   justify-content: center;\n// `\n\n// const TabItem = styled(Text)<{ isActive: boolean }>`\n//   position: relative;\n//   color: ${({ isActive, theme }) =>\n//     theme.isDark ? (isActive ? '#959596' : '#4f5f6f') : isActive ? '#4f5f6f' : '#959596'};\n//   cursor: pointer;\n//   font-size: 22px;\n//   font-weight: bold;\n//   text-decoration: none;\n//   border-bottom: ${({ isActive, theme }) =>\n//     theme.isDark ? (isActive ? '4px solid #959596' : 'none') : isActive ? '4px solid #4f5f6f' : 'none'};\n//   white-space: nowrap;\n//   margin: 10px 30px;\n//   font-family: 'Roboto';\n// `\n\nconst tabBtnArray = [{ id: 1, btnName: 'MOS Staking' }]\n\nexport enum TabStatus {\n  TabHot,\n  TabEarnCola,\n  TabColaStaking,\n  TabOthers,\n  TabNFT,\n  TabEnded,\n}\n\nexport const EarningWalletTab = ({ getCardCount }) => {\n  const { t } = useTranslation()\n\n  // const [tabId, setTabIndex] = useState(0)\n\n  const [tabId, setTabIndex] = React.useState(0)\n\n  const handleClickTab = (newIndex) => {\n    setTabIndex(newIndex)\n    if (newIndex === 0) {\n      getCardCount(TabStatus.TabHot)\n    } else if (newIndex === 1) {\n      getCardCount(TabStatus.TabEarnCola)\n    } else if (newIndex === 2) {\n      getCardCount(TabStatus.TabColaStaking)\n    }\n  }\n\n  return (\n    <ButtonMenu activeIndex={tabId} onItemClick={handleClickTab}>\n      {tabBtnArray.map((tabBtn) => (\n        <StyledButtonMenuItem key={tabBtn.id} isActive={tabBtn.id === tabId}>\n          {t(`${tabBtn.btnName}`)}\n        </StyledButtonMenuItem>\n      ))}\n    </ButtonMenu>\n  )\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { harvestFarm } from 'utils/calls'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { DEFAULT_GAS_LIMIT } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst harvestPool = async (sousChefContract) => {\n  const tx = await sousChefContract.deposit('0', options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst harvestPoolBnb = async (sousChefContract) => {\n  const tx = await sousChefContract.deposit({ value: 0})\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0)\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract)\n    } else {\n      await harvestPool(sousChefContract)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestPool\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stakeFarm } from 'utils/calls'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options)\n  const receipt = await tx.wait()\n  return receipt.status   \n}\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  console.log(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\", amount)\n  const tx = await sousChefContract.deposit({value:new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()})\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stakeFarm(masterChefContract, 0, amount)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount)\n      } else {\n        await sousStake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n","import React, { useState } from 'react'\nimport { Button, AutoRenewIcon } from 'parsec-swap-uikit'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport useHarvestPool from '../../../../hooks/useHavestPool'\nimport useStakePool from '../../../../hooks/useStakePool'\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\ninterface PoolHavestActionProps {\n  onDismiss: () => void\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  isBnbPool: boolean\n}\n\nconst PoolHavestAction: React.FC<PoolHavestActionProps> = ({\n  onDismiss,\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n}) => {\n  const { t } = useTranslation()\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const { toastSuccess, toastError } = useToast()\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n    // compounding\n    if (isCompoundPool) {\n      try {\n        await onStake(fullBalance, earningToken.decimals)\n        toastSuccess(\n          `${t('Compounded')}!`,\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        console.error(e)\n        setPendingTx(false)\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward()\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\n        )\n        setPendingTx(false)\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        console.error(e)\n        setPendingTx(false)\n      }\n    }\n    onDismiss()\n  }\n\n  return (\n    <ActionButtonContainer>\n      <ActionButton\n        disabled={!hasEarnings}\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        <span style={{ verticalAlign: 'text-top' }}>{isCompoundPool ? t('Collect') : t('Harvest')}</span>\n      </ActionButton>\n    </ActionButtonContainer>\n  )\n}\n\nexport default PoolHavestAction\n","// eslint-disable-next-line\nimport React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport PoolHavestAction from './Actions/PoolHavestAction'\n\nconst StyledCard = styled.div`\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#141436` : `#FFFFFF`)};\n  border-radius: 10px;\n  width: 321px;\n  position: relative;\n  color: rgb(197, 133, 96);\n  text-align: center;\n  padding: 19px 15px 25px 15px;\n  @media screen and (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nconst TokenImageContainer = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 75px;\n    width: 75px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n`\n\nconst TokenAmount = styled.div`\n  box-sizing: border-box;\n  margin: 16px 0px 7px 0px;\n  min-width: 0px;\n  font-weight: 500;\n  font-size: 40px;\n  line-height: 48px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst Earned = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n  box-sizing: border-box;\n  margin-top: 8px;\n  min-width: 0px;\n  font-size: 16px;\n  font-weight: 600;\n`\n\nconst PoolHavestCard: React.FC<{ onDismiss: () => void; earning: BigNumber; pool: Pool }> = ({\n  onDismiss,\n  earning,\n  pool,\n}) => {\n  const { t } = useTranslation()\n  const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\n  return (\n    <StyledCard>\n      <TokenImageContainer>\n        <img src={`/images/tokens/${getAddress(pool.earningToken.address)}.png`} alt=\"card-logo\" />\n      </TokenImageContainer>\n      <TokenAmount>{t(`${Math.round(getBalanceAmount(earning).toNumber() * 100000) / 100000}`)}</TokenAmount>\n      <Earned>{t(`${pool.earningToken.symbol} Earned`)}</Earned>\n      <PoolHavestAction\n        onDismiss={onDismiss}\n        earnings={earning}\n        earningToken={pool.earningToken}\n        sousId={pool.sousId}\n        isBnbPool={isBnbPool}\n      />\n    </StyledCard>\n  )\n}\n\nexport default PoolHavestCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from 'parsec-swap-uikit'\n// import useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n  &:hover {\n    text-decoration: none;\n  }\n`\nconst StyledButton = styled(Button)`\n  background-image: linear-gradient(to left, #991cd1,#d4307a);\n  border-radius:32px;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 25px 0px 0px 0px !important;\n`\nconst StyledButton1 = styled(Button)`\n  background-color: #ee6c4d;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 15px 0px 0px 0px !important;\n  border: none;\n  svg {\n    fill: white;\n  }\n`\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  // const { theme } = useTheme()\n\n  return (\n    <Modal title={t('%symbol% required', { symbol: tokenSymbol })} onDismiss={onDismiss}>\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <StyledLink href=\"/swap\">\n        <StyledButton variant=\"secondary\" mt=\"24px\" width=\"100%\">\n          {t('Buy')} {tokenSymbol}\n        </StyledButton>\n      </StyledLink>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <StyledButton1 variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </StyledButton1>\n      </StyledLink>\n      <Button mt=\"24px\" variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'parsec-swap-uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousEmergencyUnstake = async (sousChefContract) => {\n  const tx = await sousChefContract.emergencyWithdraw()\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await unstakeFarm(masterChefContract, 0, amount)\n      } else if (enableEmergencyWithdraw) {\n        await sousEmergencyUnstake(sousChefContract)\n      } else {\n        await sousUnstake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, BalanceInput, AutoRenewIcon, Link } from 'parsec-swap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport PercentageButton from './PercentageButton'\nimport useStakePool from '../../../../hooks/useStakePool'\nimport useUnstakePool from '../../../../hooks/useUnstakePool'\n\nconst StyledInput = styled(BalanceInput)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border-radius: 10px;\n  background-color: ${({ theme }) => (theme.isDark ? '#221712' : '#FFF3E0')};\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StyledModal = styled(Modal)`\n  background-color: #030923;\n`\n\nconst StyledButton = styled(Button)`\n  background-image: linear-gradient(to left, #991cd1,#d4307a);\n  border-radius:32px;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 40px;\n  border-radius: 32px;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 3px 0px !important;\n  border: none;\n`\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  // const [percent, setPercent] = useState(0)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\n\n  const handleStakeInputChange = (input: string) => {\n    // if (input) {\n    //   const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n    //   const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n    //   setPercent(Math.min(percentage, 100))\n    // } else {\n    //   setPercent(0)\n    // }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    // setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n        setPendingTx(false)\n        onDismiss()\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <StyledModal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\n            width={24}\n            height={24}\n            alt={stakingToken.symbol}\n          />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <StyledInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      {/* <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      /> */}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      <StyledButton\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </StyledButton>\n      {!isRemovingStake && (\n        <StyledLink external href=\"/swap\">\n          <StyledButton mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </StyledButton>\n        </StyledLink>\n      )}\n    </StyledModal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button, IconButton, AddIcon, useModal, Skeleton, useTooltip } from 'parsec-swap-uikit'\nimport BigNumber from 'bignumber.js'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px 10px !important;\n`\n\nconst ActionPlusButton = styled(IconButton)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\ninterface PoolStakeActionsProps {\n  pool: Pool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst PoolStakeAction: React.FC<PoolStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <ActionButtonContainer>\n        <ActionButton onClick={onPresentUnstake} style={{ marginRight: '5px' }}>\n          {t('UnStake')}\n        </ActionButton>\n\n        {reachStakingLimit ? (\n          <span ref={targetRef}>\n            <ActionPlusButton variant=\"tetiary\" disabled>\n              <AddIcon color=\"textDisabled\" width=\"30px\" height=\"30px\" />\n            </ActionPlusButton>\n          </span>\n        ) : (\n          <ActionPlusButton\n            variant=\"tetiary\"\n            onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n            disabled={isFinished}\n          >\n            <AddIcon color=\"white\" width=\"30px\" height=\"30px\" />\n          </ActionPlusButton>\n        )}\n        {tooltipVisible && tooltip}\n      </ActionButtonContainer>\n    ) : (\n      <ActionButtonContainer>\n        <ActionButton\n          disabled={isFinished}\n          onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n        >\n          {t('Stake')}\n        </ActionButton>\n      </ActionButtonContainer>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default PoolStakeAction\n","// eslint-disable-next-line\nimport React, { useState, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { Pool } from 'state/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { Button } from 'parsec-swap-uikit'\nimport { PoolCategory } from 'config/constants/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useApprovePool } from '../../../hooks/useApprovePool'\nimport PoolStakeAction from './Actions/PoolStakeAction'\n\nconst Card = styled.div`\n  background: #141436;\n  border-radius: 10px;\n  width: 321px;\n  position: relative;\n  color: rgb(197, 133, 96);\n  text-align: center;\n  padding: 19px 15px 25px 15px;\n  @media screen and (max-width: 480px) {\n    width: 100%;\n  }\n`\n\nconst TokenImageContainer = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 75px;\n    width: 75px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n`\n\nconst TokenAmount = styled.div`\n  box-sizing: border-box;\n  margin: 16px 0px 7px 0px;\n  min-width: 0px;\n  font-weight: 500;\n  font-size: 40px;\n  line-height: 48px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst Earned = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n  box-sizing: border-box;\n  margin-top: 8px;\n  min-width: 0px;\n  font-size: 16px;\n  font-weight: 600;\n`\n\nconst ActionButtonContainer = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-top: 29px;\n`\n\nconst ActionButton = styled(Button)`\n  background-color: #1fc7d4;\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  height: 50px;\n  border-radius: 32px;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  text-align: center;\n  color: #f8f8f8;\n  box-shadow: none;\n  margin: 0px !important;\n`\n\nconst PoolStakeCard: React.FC<{\n  pool: Pool\n  account?: string\n}> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const {\n    allowance: allowanceAsString = 0,\n    stakingTokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n  } = pool.userData || {}\n  const [isApproved, setIsApproved] = useState(false)\n\n  const stakingTokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  useEffect(() => {\n    const allowance = new BigNumber(allowanceAsString)\n    const isAppr = account && allowance && allowance.isGreaterThan(0)\n    setIsApproved(isAppr)\n  }, [account, allowanceAsString])\n\n  const { sousId, stakingToken, earningToken, poolCategory } = pool\n\n  // Pools using native PSC behave differently than pools using a token\n  const isBnbPool = stakingToken.address[1120] === '0xac201451AfBB56120dfeF2eAA2998E2D183D2041'\n  const isStaked = stakedBalance.gt(0)\n\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const { handleApprove, requestedApproval, approved } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved || approved || isBnbPool ? (\n      <PoolStakeAction\n        pool={pool}\n        stakingTokenBalance={stakingTokenBalance}\n        stakedBalance={stakedBalance}\n        isBnbPool={isBnbPool}\n        isStaked={isStaked}\n      />\n    ) : (\n      <ActionButtonContainer>\n        <ActionButton disabled={requestedApproval} onClick={handleApprove}>\n          {t('Approves')}\n        </ActionButton>\n      </ActionButtonContainer>\n    )\n  }\n\n  return (\n    <Card>\n      <TokenImageContainer>\n        <img src={`/images/tokens/${getAddress(pool.stakingToken.address)}.png`} alt=\"card-logo\" />\n      </TokenImageContainer>\n      <TokenAmount>{getBalanceAmount(stakedBalance).toNumber()}</TokenAmount>\n      <Earned>{pool.stakingToken.symbol + t(' Staked')}</Earned>\n\n      {!account ? <ConnectWalletButton scale=\"sm\" /> : renderApprovalOrStakeButton()}\n    </Card>\n  )\n}\n\nexport default PoolStakeCard\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [approved, setapproved] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      dispatch(updateUserAllowance(sousId, account))\n      if (receipt.status) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n          )\n          setapproved(true)\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      setRequestedApproval(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval,approved }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\n    setRequestedApproval(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n      setLastUpdated()\n      setRequestedApproval(false)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setRequestedApproval(false)\n    }\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\n        const currentAllowance = new BigNumber(response.toString())\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getAddress } from 'utils/addressHelpers'\nimport { ModalContainer, InjectedModalProps, ModalCloseButton } from 'parsec-swap-uikit'\nimport { Pool } from 'state/types'\nimport styled from 'styled-components'\n// import TopStakers from '../TopStakers'\nimport PoolHavestCard from './PoolHavestCard'\nimport PoolStakeCard from './PoolStakeCard'\n\nconst StyledModal = styled(ModalContainer)`\n  border: none;\n  box-shadow: none;\n  background-color: ${({ theme }) => (theme.isDark ? `#030923` : `#F0F2FA`)};\n  position: relative;\n  padding: 24px;\n  max-width: 840px;\n  // min-width: 1000px;\n  overflow: auto;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  .cancel {\n    width: 30px;\n    height: 30px;\n    margin-top: 15px;\n    margin-right: 20px;\n  }\n  @media screen and (max-width: 940px) {\n    width: 90%;\n  }\n`\n\nconst StyledCard = styled.div`\n  position: relative;\n  justify-content: center;\n  & Button {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n`\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: 24px;\n  @media screen and (max-width: 940px) {\n    flex-direction: column;\n    margin-bottom: 0;\n  }\n`\n\nconst Col = styled.div`\n  text-align: center;\n  margin: 0 35px;\n  @media screen and (max-width: 940px) {\n    margin: 12px auto;\n  }\n  @media screen and (max-width: 480px) {\n    margin: 12px 0;\n  }\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#ccccd2' : '#4f5f6f')};\n  text-align: center;\n  margin-bottom: 50px;\n`\n\nconst TokenName = styled.div`\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  font-size: 45px;\n  font-weight: 700;\n  color: ${({ theme }) => (theme.isDark ? '#ccccd2' : '#4f5f6f')};\n  line-height: 1.7;\n`\n\nconst Description = styled.div`\n  color: ${({ theme }) => (theme.isDark ? '#ccccd2' : '#4f5f6f')};\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  font-size: 18px;\n  font-weight: 500;\n`\n\nconst StyledTokenImage = styled.img`\n  height: 54px;\n`\n\ninterface PoolCardSelectedModalProps extends InjectedModalProps {\n  pool: Pool\n  account?: string\n}\n\nexport default function CustomModal({ onDismiss = () => null, pool, account }: PoolCardSelectedModalProps) {\n  const { pendingReward: earningsAsString = 0 } = pool.userData || {}\n\n  const earnings = new BigNumber(earningsAsString)\n\n  return (\n    <StyledModal minWidth=\"370px\">\n      <div style={{ textAlign: 'end' }}>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </div>\n      <StyledCard>\n        <StyledHeader>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <StyledTokenImage src={`/images/tokens/${getAddress(pool.stakingToken.address)}.png`} alt=\"card-logo\" />\n            <StyledTokenImage src={`/images/tokens/${getAddress(pool.earningToken.address)}.png`} alt=\"card-logo\" />\n          </div>\n          <TokenName>\n            {pool.stakingToken.symbol} to {pool.earningToken.symbol}\n          </TokenName>\n          <Description>\n            Deposit {pool.stakingToken.symbol} and earn {pool.earningToken.symbol}\n          </Description>\n        </StyledHeader>\n        <Row>\n          <Col>\n            <PoolHavestCard onDismiss={onDismiss} pool={pool} earning={earnings} />\n          </Col>\n          <Col>\n            <PoolStakeCard pool={pool} account={account} />\n          </Col>\n        </Row>\n        {/* <TopStakers /> */}\n      </StyledCard>\n    </StyledModal>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, AutoRenewIcon } from 'parsec-swap-uikit'\nimport useTheme from 'hooks/useTheme'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport PoolCardSelectedModal from './PoolCardSelectedModal'\n\nconst StyledCard = styled.div`\n  background: right top no-repeat ${({ theme }) => (theme.isDark ? `#141436` : `rgb(255, 253, 250);`)};\n  border-radius: 10px;\n  position: relative;\n  width: 321px;\n  margin-bottom: 24px;\n  padding: 19px 15px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n`\n\nconst StyledCardTitle = styled.div`\n  text-align: center;\n  margin: 18px 0 15px 0;\n  white-space: nowrap;\n  box-sizing: border-box;\n  min-width: 0px;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  white-space: break-spaces;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 4px;\n  padding: 12px 0px;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 120%;\n`\nconst StyledBorder = styled.span`\n  background: rgba(0, 0, 0, 0.1);\n  height: 1px;\n  display: block;\n`\nconst ColLeft = styled.div`\n  text-align: left;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n`\n\nconst ColLeftMin = styled.div`\n  text-align: left;\n  font-size: 14px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#000000')};\n`\n\nconst ColRight = styled.div`\n  text-align: right;\n  word-break: break-word;\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n`\n\nconst ColRightMin = styled.div`\n  text-align: right;\n  font-size: 14px;\n  word-break: break-word;\n  color: ${({ theme }) => (theme.isDark ? '#B9B9B999' : '#00000099')};\n`\n\nconst StyledBadge = styled.div`\n  position: absolute;\n  top: -4px;\n  right: 25px;\n  width: 30px;\n  height: 40px;\n  background: url(/images/earning/mark.svg);\n  background-repeat: no-repeat;\n  background-position: center top;\n`\n\nconst StyledBadgeStar = styled.img`\n  filter: ${({ theme }) =>\n    theme.isDark\n      ? `brightness(5) contrast(5) hue-rotate(217deg) saturate(9.9)`\n      : `brightness(5) contrast(5) hue-rotate(217deg) saturate(9.9)`};\n  position: absolute;\n  top: 7px;\n  right: 5px;\n`\n\nconst StyledTokenImage = styled.div`\n  text-align: center;\n  padding: 18px 0px;\n  border-radius: 32px;\n  background: ${({ theme }) => (theme.isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.1)')};\n  & img {\n    height: 76.5px;\n    width: 76.5px;\n    margin-bottom: 0px;\n    margin-top: 0px;\n  }\n`\n\nconst StyledSelectButton = styled(Button)`\n  background-image: linear-gradient(to left, #991cd1,#d4307a);\n  color: white;\n  padding: 12px 0px;\n  width: 100%;\n  border-radius: 32px;\n  text-align: center;\n  border: 1px solid transparent;\n  font-weight: 500;\n  font-size: 17px;\n  line-height: 26px;\n  letter-spacing: 0.01em;\n  text-transform: none;\n  height: fit-content;\n  margin: 0px !important;\n  box-shadow: none;\n`\n\nconst PoolCardItem: React.FC<{ pool: Pool; account?: string; isLoading: boolean }> = ({ pool, account, isLoading }) => {\n  const theme = useTheme()\n  const { t } = useTranslation()\n  const [onCardClick] = useModal(<PoolCardSelectedModal pool={pool} account={account} />)\n  return (\n    <StyledCard>\n      <StyledBadge>\n        <StyledBadgeStar\n          src={theme.isDark ? 'images/earning/icon_star.svg' : 'images/earning/icon_star_white.svg'}\n          alt=\"card-logo\"\n        />\n      </StyledBadge>\n      <StyledTokenImage>\n        <img src={`/images/tokens/${getAddress(pool.stakingToken.address)}.png`} alt=\"card-logo\" />\n        <img src={`/images/tokens/${getAddress(pool.earningToken.address)}.png`} alt=\"card-logo\" />\n      </StyledTokenImage>\n      <StyledCardTitle>{t(`${pool.stakingToken.symbol} to ${pool.earningToken.symbol}`)}</StyledCardTitle>\n      <Row>\n        <ColLeft>{t('Stake:')}</ColLeft>\n        <ColRight>{t(`${getBalanceAmount(pool.userData.stakedBalance)} ${pool.stakingToken.symbol}`)}</ColRight>\n      </Row>\n      <StyledBorder />\n      <Row>\n        <ColLeft>{t('Earn:')}</ColLeft>\n        <ColRight>\n          {t(\n            `${Math.round(getBalanceAmount(pool.userData.pendingReward).toNumber() * 100000) / 100000} ${\n              pool.earningToken.symbol\n            }`,\n          )}\n        </ColRight>\n      </Row>\n      <StyledBorder />\n      <Row>\n        <ColLeft>{t('APR:')}</ColLeft>\n        <ColRight>{t(`${Math.round(pool.apr * 100000) / 100000}`)}</ColRight>\n      </Row>\n      <StyledBorder />\n      <Row>\n        <ColLeftMin>{t('Total staked:')}</ColLeftMin>\n        <ColRightMin>{t(`${getBalanceAmount(pool.totalStaked)}`)}</ColRightMin>\n      </Row>\n      <Row>\n        <ColLeftMin>{t('End in:')}</ColLeftMin>\n        <ColRightMin>{t(`${pool.endBlock} block`)}</ColRightMin>\n      </Row>\n      <Row>\n        <ColLeftMin>{t('Max stake per user:')}</ColLeftMin>\n        <ColRightMin>{t(`${getBalanceAmount(pool.stakingLimit)} `)}</ColRightMin>\n        {/* <ColRightMin style={{ width: '50px', overflow: 'hidden', textOverflow: 'clip' }}>\n          {t(`${pool.stakingLimit}`)}\n        </ColRightMin> */}\n      </Row>\n      <StyledSelectButton\n        onClick={onCardClick}\n        isLoading={isLoading}\n        endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {isLoading ? 'Loading' : 'SELECT'}\n      </StyledSelectButton>\n    </StyledCard>\n  )\n}\n\nexport default PoolCardItem\n","import React, { useState, useCallback, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useFarms, usePollFarmsData, usePriceColaBusd } from 'state/farms/hooks'\n// import { useFetchPublicPoolsData, usePools, useCakeVault } from 'state/pools/hooks'\nimport { useFetchPublicPoolsData, usePools } from 'state/pools/hooks'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\n// import { Farm, Pool } from 'state/types'\nimport { Farm } from 'state/types'\nimport { getFarmApr } from 'utils/apr'\n// import { orderBy, partition } from 'lodash'\nimport { partition } from 'lodash'\n\nimport { TabStatus, EarningWalletTab } from './components/EarningWalletTab'\nimport WalletCardItem, { FarmWithStakedValue } from './components/WalletCardItem'\nimport PoolCardItem from './components/Pool/PoolCardItem'\nimport BaseLayout from '../../../components/BaseLayout'\n// import { getAprData, getCakeVaultEarnings } from './helpers'\n\nconst StyledFlexLayout = styled(BaseLayout)`\n  justify-content: center;\n  margin: 24px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0 20px;\n`\n\nconst StyledContent = styled.div`\n  display: flex;\n  \n  flex-direction: column;\n  align-items: center;\n`\n\nconst Wrapper = styled.div`\nbackground:#030923;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding-top: 30px;\n  -webkit-box-align: center;\n  align-items: center;\n  flex: 1 1 0%;\n  overflow: hidden auto;\n  z-index: 1;\n  min-height: calc(100vh - 64px);\n  // background-color: ${({ theme }) => (theme.isDark ? '#141c23' : '#cfcfcf')};\n  background-size: 150%;\n  // background: #030923;\n  // background-image: ${({ theme }) => (theme.isDark ? `url('/images/background1.png')` : `url('/images/light.png')`)};\n  background-repeat: no-repeat;\n  background-position: center;\n  // background: ${({ theme }) => (theme.isDark ? '#030923' : '#E5E5E5')};\n`\n\nconst StyledTitle = styled.div`  \n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  font-weight: 700;\n  font-size: 25px;\n  line-height: 30px;\n  color: ${({ theme }) => (theme.isDark ? '#D6D7E3' : '#171717')};\n  padding: 10px 0;\n  margin-bottom: 20px;\n`\n\nconst EarningWalletConnected = () => {\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded: userFarmDataLoaded } = useFarms()\n  const colaPrice = usePriceColaBusd()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded: userPoolDataLoaded } = usePools(account)\n  const [tabStatus, setTabStatus] = useState(TabStatus.TabColaStaking)\n\n  // const [sortOption, setSortOption] = useState('hot')\n\n  // const {\n  //   userData: { cakeAtLastUserAction, userShares },\n  //   fees: { performanceFee },\n  //   pricePerFullShare,\n  //   totalCakeInVault,\n  // } = useCakeVault()\n  // const accountHasVaultShares = userShares && userShares.gt(0)\n  // const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  console.log(Number(poolsWithoutAutoVault[1].userData.pendingReward),\"ppppppppppppppppppppppppppppppp\")\n  const pools = useMemo(() => {\n    return [...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  const [stakeColaPools] = useMemo(() => partition(pools, (pool) => pool.stakingToken.symbol !== 'MOS'), [pools])\n  const [earnColaPools] = useMemo(() => partition(pools, (pool) => pool.earningToken.symbol !== 'MOS'), [pools])\n\n  usePollFarmsData(false)\n  useFetchPublicPoolsData()\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n\n  const isActive = true\n  const query = ''\n  // const [query, setQuery] = useState('')\n  // const [isActive, setActive] = useState(true)\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const lpAddress = getAddress(farm.lpAddresses)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), colaPrice, totalLiquidity, lpAddress)\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        // const lowercaseQuery = latinise(query.toLowerCase())\n        const lowercaseQuery = latinise(query)\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [colaPrice, query, isActive],\n  )\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    // const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    //   switch (sortOption) {\n    //     case 'apr':\n    //       return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n    //     case 'multiplier':\n    //       return orderBy(\n    //         farms,\n    //         (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n    //         'desc',\n    //       )\n    //     case 'earned':\n    //       return orderBy(\n    //         farms,\n    //         (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n    //         'desc',\n    //       )\n    //     case 'liquidity':\n    //       return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n    //     default:\n    //       return farms\n    //   }\n    // }\n\n    switch (tabStatus) {\n      case TabStatus.TabHot:\n        chosenFarms = farmsList(activeFarms)\n        break\n      case TabStatus.TabEarnCola:\n        break\n      case TabStatus.TabColaStaking:\n        break\n      case TabStatus.TabNFT:\n        break\n      case TabStatus.TabOthers:\n        break\n      case TabStatus.TabEnded:\n        break\n      default:\n        break\n    }\n\n    // return sortFarms(chosenFarms)\n    return chosenFarms\n  }, [activeFarms, farmsList, tabStatus])\n  // }, [sortOption, activeFarms, farmsList, tabStatus])\n\n  const chosenPoolsMemoized = useMemo(() => {\n    let chosenPools\n    // const sortPools = (poolsToSort: Pool[]): Pool[] => {\n    //   switch (sortOption) {\n    //     case 'apr':\n    //       // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n    //         'desc',\n    //       )\n    //     case 'earned':\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => {\n    //           if (!pool.userData || !pool.earningTokenPrice) {\n    //             return 0\n    //           }\n    //           return pool.isAutoVault\n    //             ? getCakeVaultEarnings(\n    //                 account,\n    //                 cakeAtLastUserAction,\n    //                 userShares,\n    //                 pricePerFullShare,\n    //                 pool.earningTokenPrice,\n    //               ).autoUsdToDisplay\n    //             : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n    //         },\n    //         'desc',\n    //       )\n    //     case 'totalStaked':\n    //       return orderBy(\n    //         poolsToSort,\n    //         (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\n    //         'desc',\n    //       )\n    //     default:\n    //       return poolsToSort\n    //   }\n    // }\n    chosenPools = stakeColaPools\n\n    switch (tabStatus) {\n      case TabStatus.TabHot:\n        break\n      case TabStatus.TabEarnCola:\n        chosenPools = earnColaPools\n        break\n      case TabStatus.TabColaStaking:\n        chosenPools = stakeColaPools\n        break\n      case TabStatus.TabNFT:\n        break\n      case TabStatus.TabOthers:\n        break\n      case TabStatus.TabEnded:\n        break\n      default:\n        break\n    }\n\n    // return sortPools(chosenPools)\n    return chosenPools\n  }, [\n    // sortOption,\n    // pools,\n    // account,\n    // cakeAtLastUserAction,\n    // performanceFeeAsDecimal,\n    // pricePerFullShare,\n    // totalCakeInVault,\n    // userShares,\n    tabStatus,\n    stakeColaPools,\n    earnColaPools,\n  ])\n\n  const callback = (status) => {\n    setTabStatus(status)\n  }\n\n  return (\n    <Wrapper>\n      <StyledContent>\n        <StyledTitle>{t('Earning')}</StyledTitle>\n\n        {/* <EarningWalletTab getCardCount={callback} /> */}\n\n        <StyledFlexLayout>\n          {pools.map((pool) => (\n            <PoolCardItem key={pool.sousId} pool={pool} account={account} isLoading={!userPoolDataLoaded} />\n          ))}\n        </StyledFlexLayout>\n      </StyledContent>\n    </Wrapper>\n  )\n}\n\nexport default EarningWalletConnected\n","import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  fetchPoolsStakingLimitsAsync,\n} from '.'\nimport { State, Pool } from '../types'\nimport { transformPool } from './helpers'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh])\n}\n\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.deposit(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const unstakeFarm = async (masterChefContract, pair, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  const tx = await masterChefContract.withdraw(pair, value, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const harvestFarm = async (masterChefContract, pair) => {\n  const tx = await masterChefContract.deposit(pair, '0', options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport pools from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = pools\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","import { DEFAULT_GAS_LIMIT } from 'config'\nimport { ethers } from 'ethers'\n\nconst options = {\n  gasLimit: ethers.utils.parseEther('0.0000000000003'),\n}\n\nconst overrides = {\n  value: ethers.utils.parseEther('0.1'),\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const mintNFT = async (nftContract, tokenID) => {\n  const tx = await nftContract.mint(tokenID, overrides)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const burnNFT = async (nftContract, address, tokenID) => {\n  const tx = await nftContract.burn(address, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getTokenURI = async (nftContract, address, tokenID) => {\n  const uri = await nftContract.tokenURI(tokenID)\n  return uri\n}\n\n// Exchange\nexport const approveMatchaToken = async (matchaTokenContract, nftExchangeAddr, amount) => {\n  const tx = await matchaTokenContract.approve(nftExchangeAddr, amount, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveMatchaToken = async (matchaTokenContract, owner, spender) => {\n  const value = await matchaTokenContract.allowance(owner, spender)\n  return value\n}\n\nexport const approveNFT = async (originalNftContract, nftExchangeAddr, tokenID) => {\n  const tx = await originalNftContract.approve(nftExchangeAddr, tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getApproveNFT = async (originalNftContract, tokenID) => {\n  const address = await originalNftContract.getApproved(tokenID)\n  return address\n}\n\nexport const buyToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.buyToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const readyToSellToken = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.readyToSellToken(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const cancelSellToken = async (nftExchangeContract, tokenID) => {\n  const tx = await nftExchangeContract.cancelSellToken(tokenID, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const setCurrentPrice = async (nftExchangeContract, tokenID, price) => {\n  const tx = await nftExchangeContract.setCurrentPrice(tokenID, price, options)\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const getAskLength = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAskLength()\n  return askLen\n}\n\nexport const getAsks = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsks()\n  return askLen\n}\n\nexport const getAsksDesc = async (nftExchangeContract) => {\n  const askLen = await nftExchangeContract.getAsksDesc()\n  return askLen\n}\n\nexport const getAsksByPage = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPage(page, size)\n  return askLen\n}\n\nexport const getAsksByPageDesc = async (nftExchangeContract, page, size) => {\n  const askLen = await nftExchangeContract.getAsksByPageDesc(page, size)\n  return askLen\n}\n\nexport const getAsksByUser = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUser(user)\n  return askLen\n}\n\nexport const getAsksByUserDesc = async (nftExchangeContract, user) => {\n  const askLen = await nftExchangeContract.getAsksByUserDesc(user)\n  return askLen\n}\n","import styled from 'styled-components'\nimport { Grid } from 'parsec-swap-uikit'\n\nconst GridLayout = styled(Grid)`\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 16px;\n  @media screen and (min-width: 660px) {\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 24px;\n  }\n  @media screen and (min-width: 1260px) {\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 24px;\n  }\n`\n\nexport default GridLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n"],"sourceRoot":""}