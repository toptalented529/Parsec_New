{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/logic/updateFieldArrayRootError.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isMessage.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRegex.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/isPlainObject.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/fillEmptyArray.ts","../../src/utils/getValidationModes.ts","../../src/utils/unset.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/live.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","createContext","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","get","_key","_proxyFormState","keys","length","formStateData","isEmptyObject","find","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isBlurEvent","some","watchName","startsWith","slice","error","fieldArrayErrors","isValidElement","RegExp","defaultResult","isValid","validResult","options","values","option","attributes","defaultReturn","previous","getValidateError","isMessage","every","isBoolean","validationData","isRegex","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isRadioInput","isCheckBox","isRadioOrCheckbox","isEmpty","isFileInput","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getCheckboxValue","getRadioValue","getValueAndMessage","maxOutput","minOutput","valueDate","valueAsDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","window","HTMLElement","document","cloneObject","copy","Set","isWeb","Blob","FileList","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isEmptyArray","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","owner","ownerDocument","defaultView","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","setValueAs","NaN","getFieldValue","files","isMultipleSelect","selectedOptions","getFieldValueAs","_fields","criteriaMode","rule","source","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","validateField","fieldError","updateFieldArrayRootError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","useState","updateFormState","useCallback","shouldRenderFormState","getProxyFormState"],"mappings":"qQAEA,EAAe,SAACA,GAAqB,MAClB,aAAjBA,EAAQC,IAAmB,ECH7B,EAAe,SAACC,GAAc,OAAoBA,aAAiBC,IAAI,ECAvE,EAAe,SAACD,GAAc,OAAyC,MAATA,CAAa,ECG9DE,EAAe,SAACF,GAAc,MAAsB,kBAAVA,CAAkB,EAEzE,EAAe,SAAmBA,GAAc,OAC7CG,EAAkBH,KAClBI,MAAMC,QAAQL,IACfE,EAAaF,KACZM,EAAaN,EAAM,ECJtB,EAAe,SAACO,GAAc,OAC5BC,EAASD,IAAWA,EAAgBE,OAChCC,EAAiBH,EAAgBE,QAC9BF,EAAgBE,OAAOE,QACvBJ,EAAgBE,OAAOT,MAC1BO,CAAK,ECNX,EAAe,SAACK,EAA+BC,GAAuB,OACpED,EAAME,ICLO,SAACD,GAAY,OAC1BA,EAAKE,UAAU,EAAGF,EAAKG,OAAO,iBAAmBH,CAAI,CDI3CI,CAAkBJ,GAAM,EELpC,EAAe,SAASb,GAAe,OACrCI,MAAMC,QAAQL,GAASA,EAAMkB,OAAOC,SAAW,EAAE,ECDnD,EAAe,SAACC,GAAY,YAA+BC,IAARD,CAAiB,ECKpE,EAAe,SAAIE,EAAQC,EAAcC,GACvC,IAAKD,IAASf,EAASc,GACrB,OAAOE,EAGT,IAAMC,EAASC,EAAQH,EAAKI,MAAM,cAAcC,QAC9C,SAACH,EAAQI,GAAG,OACV1B,EAAkBsB,GAAUA,EAASA,EAAOI,EAAgB,GAC9DP,GAGF,OAAOQ,EAAYL,IAAWA,IAAWH,EACrCQ,EAAYR,EAAIC,IACdC,EACAF,EAAIC,GACNE,CACN,ECnBaM,EACL,OADKA,EAEA,WAIAC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCpBZ,GCCwB,EAAMC,cAAoC,MDDnD,SACbC,EACAC,EACAC,GAEE,IADFC,IAAS,UAAH,+CAEAb,EAAS,CACbc,cAAeH,EAAQI,gBACH,WAEXX,GACTY,OAAOC,eAAejB,EAAQI,EAAK,CACjCc,IAAK,WACH,IAAMC,EAAOf,EAOb,OALIO,EAAQS,gBAAgBD,KAAUZ,IACpCI,EAAQS,gBAAgBD,IAASN,GAAUN,GAG7CK,IAAwBA,EAAoBO,IAAQ,GAC7CT,EAAUS,EAClB,GACA,EAZL,IAAK,IAAMf,KAAOM,EAAW,EAAlBN,GAeX,OAAOJ,CACT,GEzBA,EAAe,SAACzB,GAAc,OAC5BQ,EAASR,KAAWyC,OAAOK,KAAK9C,GAAO+C,MAAM,ECD/C,EAAe,SACbC,EACAH,EACAP,GAE+BU,EAAvBnC,KAAR,IAAiBsB,EAAS,YAAKa,EAAa,GAE5C,OACEC,EAAcd,IACdM,OAAOK,KAAKX,GAAWY,QAAUN,OAAOK,KAAKD,GAAiBE,QAC9DN,OAAOK,KAAKX,GAAWe,MACrB,SAACrB,GAAG,OACFgB,EAAgBhB,OACdS,GAAUN,EAAoB,GAGxC,ECpBA,EAAe,SAAIhC,GAAQ,OAAMI,MAAMC,QAAQL,GAASA,EAAQ,CAACA,EAAM,ECUjE,SAAUmD,EAAgBC,GAC9B,IAAMC,EAAS,EAAMC,OAAOF,GAC5BC,EAAOE,QAAUH,EAEjB,EAAMI,WAAU,WACd,IAAMC,GACHL,EAAMM,UACPL,EAAOE,QAAQI,QAAQC,UAAU,CAC/BC,KAAMR,EAAOE,QAAQO,WAGzB,OAAO,WACLL,GAAgBA,EAAaM,aAC/B,CACF,GAAG,CAACX,EAAMM,UACZ,CCzBA,MAAe,SAAC1D,GAAc,MAAuC,kBAAVA,CAAkB,ECI7E,EAAe,SACbY,EACAoD,EACAC,EACAC,GAEA,IAAM7D,EAAUD,MAAMC,QAAQO,GAC9B,OAAIuD,EAASvD,IACXsD,GAAYF,EAAOI,MAAMC,IAAIzD,GACtB,EAAIqD,EAAYrD,IAGrBP,EACKO,EAAM0D,KACX,SAACC,GAAS,OACRL,GAAYF,EAAOI,MAAMC,IAAIE,GAC7B,EAAIN,EAAYM,EAA+B,KAKrDL,IAAaF,EAAOQ,UAAW,GACxBP,EACT,EC3BA,EAAe,SAACjE,GAAc,MACX,oBAAVA,CAAoB,ECC7B,EAAe,SAAIyE,GACjB,IAAK,IAAM5C,KAAO4C,EAChB,GAAIC,EAAWD,EAAK5C,IAClB,OAAO,EAGX,OAAO,CACT,ECoCA,ICvCA,EAAe,SACbhB,EACA8D,EACAC,EACA7E,EACA8E,GAAuB,OAEvBF,EAAwB,2BAEfC,EAAO/D,IAAK,IACfiE,MAAO,2BACDF,EAAO/D,IAAS+D,EAAO/D,GAAOiE,MAAQF,EAAO/D,GAAOiE,MAAQ,CAAC,GAAC,kBACjE/E,EAAO8E,IAAW,MAGvB,CAAC,CAAC,ECrBR,EAAe,SAAC7E,GAAa,MAAK,QAAQ+E,KAAK/E,EAAM,ECErD,EAAe,SAACgF,GAAa,OAC3BtD,EAAQsD,EAAMC,QAAQ,YAAa,IAAItD,MAAM,SAAS,ECGhC,SAAAuD,EACtBC,EACA5D,EACAvB,GAOA,IALA,IAAIoF,GAAS,EACPC,EAAWC,EAAM/D,GAAQ,CAACA,GAAQgE,EAAahE,GAC/CwB,EAASsC,EAAStC,OAClByC,EAAYzC,EAAS,IAElBqC,EAAQrC,GAAQ,CACvB,IAAMlB,EAAMwD,EAASD,GACjBK,EAAWzF,EAEf,GAAIoF,IAAUI,EAAW,CACvB,IAAME,EAAWP,EAAOtD,GACxB4D,EACEjF,EAASkF,IAAatF,MAAMC,QAAQqF,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,CAAC,EADD,EAEP,CACDD,EAAOtD,GAAO4D,EACdN,EAASA,EAAOtD,EACjB,CACD,OAAOsD,CACT,CC7BA,IAAMS,EAAe,SAAfA,EACJC,EACA/B,EACAgC,GACE,IACkD,EADlD,cACgBA,GAAerD,OAAOK,KAAK+C,IAAO,IAApD,IAAK,EAAL,qBAAsD,KAA3ChE,EAAG,QACNkE,EAAQ,EAAIF,EAAQhE,GAE1B,GAAIkE,EAAO,CACT,IAAQC,EAAwBD,EAAxBC,GAAOC,EAAY,YAAKF,EAAK,GAErC,GAAIC,GAAMlC,EAASkC,EAAGnF,MAAO,CAC3B,GAAImF,EAAGE,IAAIC,MAAO,CAChBH,EAAGE,IAAIC,QACP,KACD,CAAM,GAAIH,EAAGI,MAAQJ,EAAGI,KAAK,GAAGD,MAAO,CACtCH,EAAGI,KAAK,GAAGD,QACX,KACD,CACF,MAAU3F,EAASyF,IAClBL,EAAaK,EAAcnC,EAE9B,CACF,gCACH,EC1BA,EAAe,SACbjD,EACAmD,EACAqC,GAAqB,OAEpBA,IACArC,EAAOQ,UACNR,EAAOI,MAAMtD,IAAID,IACjB,YAAImD,EAAOI,OAAOkC,MAChB,SAACC,GAAS,OACR1F,EAAK2F,WAAWD,IAChB,SAASxB,KAAKlE,EAAK4F,MAAMF,EAAUxD,QAAQ,IAC7C,ECJN,GAAe,SACb6B,EACA8B,EACA7F,GAEA,IAAM8F,EAAmBjF,EAAQ,EAAIkD,EAAQ/D,IAG7C,OAFAqE,EAAIyB,EAAkB,OAAQD,EAAM7F,IACpCqE,EAAIN,EAAQ/D,EAAM8F,GACX/B,CACT,ECnBA,GAAe,SAAC5E,GAAc,MAAwC,mBAAVA,CAAmB,ECE/E,GAAe,SAACF,GAAqB,MAClB,SAAjBA,EAAQC,IAAe,ECEzB,GAAe,SAACC,GAAc,OAC5BmE,EAASnE,IAAU,EAAM4G,eAAe5G,EAAqB,ECJ/D,GAAe,SAACF,GAAqB,MAClB,UAAjBA,EAAQC,IAAgB,ECH1B,GAAe,SAACC,GAAc,OAAsBA,aAAiB6G,MAAM,ECOrEC,GAAqC,CACzC9G,OAAO,EACP+G,SAAS,GAGLC,GAAc,CAAEhH,OAAO,EAAM+G,SAAS,GAE5C,GAAe,SAACE,GACd,GAAI7G,MAAMC,QAAQ4G,GAAU,CAC1B,GAAIA,EAAQlE,OAAS,EAAG,CACtB,IAAMmE,EAASD,EACZ/F,QAAO,SAACiG,GAAM,OAAKA,GAAUA,EAAOxG,UAAYwG,EAAOzD,QAAQ,IAC/DY,KAAI,SAAC6C,GAAM,OAAKA,EAAOnH,KAAK,IAC/B,MAAO,CAAEA,MAAOkH,EAAQH,UAAWG,EAAOnE,OAC3C,CAED,OAAOkE,EAAQ,GAAGtG,UAAYsG,EAAQ,GAAGvD,SAErCuD,EAAQ,GAAGG,aAAetF,EAAYmF,EAAQ,GAAGG,WAAWpH,OAC1D8B,EAAYmF,EAAQ,GAAGjH,QAA+B,KAArBiH,EAAQ,GAAGjH,MAC1CgH,GACA,CAAEhH,MAAOiH,EAAQ,GAAGjH,MAAO+G,SAAS,GACtCC,GACFF,EACL,CAED,OAAOA,EACT,EC7BMO,GAAkC,CACtCN,SAAS,EACT/G,MAAO,MAGT,GAAe,SAACiH,GAA4B,OAC1C7G,MAAMC,QAAQ4G,GACVA,EAAQrF,QACN,SAAC0F,EAAUH,GAAM,OACfA,GAAUA,EAAOxG,UAAYwG,EAAOzD,SAChC,CACEqD,SAAS,EACT/G,MAAOmH,EAAOnH,OAEhBsH,CAAQ,GACdD,IAEFA,EAAa,EClBL,SAAUE,GACtB9F,EACAyE,GACiB,IAAjBnG,EAAO,UAAH,6CAAG,WAEP,GACEyH,GAAU/F,IACTrB,MAAMC,QAAQoB,IAAWA,EAAOgG,MAAMD,KACtCE,GAAUjG,KAAYA,EAEvB,MAAO,CACL1B,OACA8E,QAAS2C,GAAU/F,GAAUA,EAAS,GACtCyE,MAGN,CChBA,OAAe,SAACyB,GAA+B,OAC7CnH,EAASmH,KAAoBC,GAAQD,GACjCA,EACA,CACE3H,MAAO2H,EACP9C,QAAS,GACV,ECgBP,oDAAe,WACbkB,EACA8B,EACAlD,EACAmD,EACAC,GAAsB,mLAeZ,GAfY,EAgBlBhC,EAAMC,GAbRE,EAAG,EAAHA,IACAE,EAAI,EAAJA,KACA4B,EAAQ,EAARA,SACAC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAG,EAAHA,IACAC,EAAG,EAAHA,IACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAzH,EAAI,EAAJA,KACA0H,EAAa,EAAbA,cACAC,EAAK,EAALA,MACA9E,EAAQ,EAARA,SAEG8E,IAAS9E,EAAQ,yCACb,CAAC,GAAC,OAqCV,GAnCK+E,EAA6BrC,EAAOA,EAAK,GAAMF,EAC/CwC,EAAoB,SAAC7D,GACrBiD,GAA6BW,EAASE,iBACxCF,EAASC,kBAAkBhB,GAAU7C,GAAW,GAAKA,GAAW,KAChE4D,EAASE,iBAEb,EACMjC,EAA6B,CAAC,EAC9BkC,EAAUC,GAAa3C,GACvB4C,EAAapI,EAAgBwF,GAC7B6C,EAAoBH,GAAWE,EAC/BE,GACFT,GAAiBU,GAAY/C,MAAUA,EAAIlG,OAC9B,KAAf6H,GACCzH,MAAMC,QAAQwH,KAAgBA,EAAW9E,OACtCmG,EAAoBC,EAAaC,KACrC,KACAvI,EACA8D,EACA+B,GAEI2C,EAAmB,SACvBC,EACAC,EACAC,GAGE,IAFFC,EAAU,UAAH,6CAAGxH,EACVyH,EAAU,UAAH,6CAAGzH,EAEJ4C,EAAUyE,EAAYC,EAAmBC,EAC/C9C,EAAM7F,GAAQ,aACZd,KAAMuJ,EAAYG,EAAUC,EAC5B7E,UACAqB,OACGgD,EAAkBI,EAAYG,EAAUC,EAAS7E,GAExD,IAGEkD,GACK3H,MAAMC,QAAQwH,KAAgBA,EAAW9E,OAC1CiF,KACGe,IAAsBC,GAAW7I,EAAkB0H,KACnDH,GAAUG,KAAgBA,GAC1BiB,IAAea,GAAiBvD,GAAMW,SACtC6B,IAAYgB,GAAcxD,GAAMW,UAAS,iBAE1B,GAF0B,EAErBS,GAAUQ,GACjC,CAAEhI,QAASgI,EAAUnD,QAASmD,GAC9B6B,GAAmB7B,GAFfhI,EAAK,EAALA,MAAO6E,EAAO,EAAPA,SAIX7E,EAAO,CAAF,gBAML,GALF0G,EAAM7F,GAAQ,aACZd,KAAMkC,EACN4C,UACAqB,IAAKuC,GACFS,EAAkBjH,EAAiC4C,IAEnDF,EAA0B,CAAF,gBACA,OAA3B+D,EAAkB7D,GAAS,kBACpB6B,GAAK,WAKbsC,GAAa7I,EAAkBgI,IAAShI,EAAkBiI,GAAK,iBAyBjE,GAtBK0B,EAAYD,GAAmBzB,GAC/B2B,EAAYF,GAAmB1B,GAEhChI,EAAkB0H,IAAgBlC,MAAMkC,IAWrCmC,EACH9D,EAAyB+D,aAAe,IAAIhK,KAAK4H,GAChD1D,EAAS2F,EAAU9J,SACrBsJ,EAAYU,EAAY,IAAI/J,KAAK6J,EAAU9J,QAEzCmE,EAAS4F,EAAU/J,SACrBkK,EAAYF,EAAY,IAAI/J,KAAK8J,EAAU/J,UAhBvCmK,EACHjE,EAAyBqC,gBACzBV,GAAcA,EAAaA,GACzB1H,EAAkB2J,EAAU9J,SAC/BsJ,EAAYa,EAAcL,EAAU9J,OAEjCG,EAAkB4J,EAAU/J,SAC/BkK,EAAYC,EAAcJ,EAAU/J,SAapCsJ,IAAaY,EAAS,iBAOtB,GANFb,IACIC,EACFQ,EAAUjF,QACVkF,EAAUlF,QACV5C,EACAA,GAEG0C,EAA0B,CAAF,gBACa,OAAxC+D,EAAkBhC,EAAM7F,GAAOgE,SAAS,kBACjC6B,GAAK,YAMfuB,IAAaC,GACbc,KACA7E,EAAS0D,IAAgBE,GAAgB3H,MAAMC,QAAQwH,IAAa,iBAS1B,GAPrCuC,GAAkBP,GAAmB5B,GACrCoC,GAAkBR,GAAmB3B,GACrC,IACH/H,EAAkBiK,GAAgBpK,QACnC6H,EAAW9E,OAASqH,GAAgBpK,MAChC,IACHG,EAAkBkK,GAAgBrK,QACnC6H,EAAW9E,OAASsH,GAAgBrK,OAElC,KAAa,GAAS,iBAKtB,GAJFqJ,EACE,GACAe,GAAgBvF,QAChBwF,GAAgBxF,SAEbF,EAA0B,CAAF,gBACa,OAAxC+D,EAAkBhC,EAAM7F,GAAOgE,SAAS,kBACjC6B,GAAK,YAKd2B,GAAYW,IAAW7E,EAAS0D,GAAW,iBACT,GADS,GACJgC,GAAmBxB,GAA7CiC,GAAY,GAAnBtK,MAAqB,GAAO,GAAP6E,SAEzB+C,GAAQ0C,KAAkBzC,EAAW0C,MAAMD,IAAa,iBAMxD,GALF5D,EAAM7F,GAAQ,aACZd,KAAMkC,EACN4C,QAAA,GACAqB,OACGgD,EAAkBjH,EAAgC,KAElD0C,EAA0B,CAAF,gBACA,OAA3B+D,EAAkB,IAAS,kBACpBhC,GAAK,YAKd4B,EAAU,CAAF,oBACN5D,EAAW4D,GAAW,CAAF,iCACDA,EAAST,GAAW,QACe,GADlDpG,GAAS,EAAH,OACN+I,GAAgBjD,GAAiB9F,GAAQgH,IAE5B,CAAF,gBAOb,GANF/B,EAAM7F,GAAQ,2BACT2J,IACAtB,EACDjH,EACAuI,GAAc3F,UAGbF,EAA0B,CAAF,gBACc,OAAzC+D,EAAkB8B,GAAc3F,SAAS,kBAClC6B,GAAK,oCAGPlG,EAAS8H,GAAW,CAAF,gBACvBmC,GAAmB,CAAC,EAAe,wBAErBnC,GAAQ,+CAAZ,GAAHzG,GAAG,WACPoB,EAAcwH,KAAsB9F,EAAwB,qDAI3B,OAJ2B,KAI3C4C,GAAgB,UAC9Be,EAASzG,IAAKgG,GAAW,yBAC/BY,EAAQ,KACR5G,IAHI,IAAgB,EAAH,yBAOjB4I,GAAmB,2BACd,IACAvB,EAAkBrH,GAAK,GAAcgD,UAG1C6D,EAAkB,GAAc7D,SAE5BF,IACF+B,EAAM7F,GAAQ4J,KAEjB,2BAGExH,EAAcwH,IAAmB,CAAF,gBAIhC,GAHF/D,EAAM7F,GAAQ,aACZqF,IAAKuC,GACFgC,IAEA9F,EAA0B,CAAF,yCACpB+B,GAAK,QAMI,OAAxBgC,GAAkB,GAAM,kBACjBhC,GAAK,4CACb,gBA3OD,8CCxBA,ICFA,GAAiC,qBAAXgE,QACU,qBAAvBA,OAAOC,aACM,qBAAbC,SCEe,SAAAC,GAAepG,GACrC,IAAIqG,EACEzK,EAAUD,MAAMC,QAAQoE,GAE9B,GAAIA,aAAgBxE,KAClB6K,EAAO,IAAI7K,KAAKwE,QACX,GAAIA,aAAgBsG,IACzBD,EAAO,IAAIC,IAAItG,OACV,IACHuG,KAAUvG,aAAgBwG,MAAQxG,aAAgByG,YACnD7K,IAAWG,EAASiE,GAYrB,OAAOA,EARP,GAFAqG,EAAOzK,EAAU,GAAK,CAAC,EAElBD,MAAMC,QAAQoE,IFhBR,SAAC0G,GACd,IAAMC,EACJD,EAAWE,aAAeF,EAAWE,YAAYC,UAEnD,OACE9K,EAAS4K,IAAkBA,EAAcG,eAAe,gBAE5D,CESiCC,CAAc/G,GAGzC,IAAK,IAAM5C,KAAO4C,EAChBqG,EAAKjJ,GAAOgJ,GAAYpG,EAAK5C,SAH/BiJ,EAAOrG,CAQV,CAED,OAAOqG,CACT,CC9BA,ICGA,GAAe,SACbW,GAAW,MAOP,CACJC,YAAaD,GAAQA,IAASzJ,EAC9B2J,SAAUF,IAASzJ,EACnB4J,WAAYH,IAASzJ,EACrB6J,QAASJ,IAASzJ,EAClB8J,UAAWL,IAASzJ,EACrB,ECAD,SAAS+J,GAAazK,GACpB,IAAK,IAAMO,KAAOP,EAChB,IAAKQ,EAAYR,EAAIO,IACnB,OAAO,EAGX,OAAO,CACT,CAEc,SAAUmK,GAAM7G,EAAa5D,GACzC,IAII0K,EAJEC,EAAa5G,EAAM/D,GAAQ,CAACA,GAAQgE,EAAahE,GACjD4K,EACiB,GAArBD,EAAWnJ,OAAcoC,EAvB7B,SAAiBA,EAAa+G,GAI5B,IAHA,IAAMnJ,EAASmJ,EAAWzF,MAAM,GAAI,GAAG1D,OACnCqC,EAAQ,EAELA,EAAQrC,GACboC,EAASrD,EAAYqD,GAAUC,IAAUD,EAAO+G,EAAW9G,MAG7D,OAAOD,CACT,CAcsCiH,CAAQjH,EAAQ+G,GAC9CrK,EAAMqK,EAAWA,EAAWnJ,OAAS,GAGvCoJ,UACKA,EAAYtK,GAGrB,IAAK,IAAIwK,EAAI,EAAGA,EAAIH,EAAWzF,MAAM,GAAI,GAAG1D,OAAQsJ,IAAK,CACvD,IAAIjH,GAAS,EACTkH,OAAS,EACPC,EAAeL,EAAWzF,MAAM,IAAK4F,EAAI,IACzCG,EAAqBD,EAAaxJ,OAAS,EAMjD,IAJIsJ,EAAI,IACNJ,EAAiB9G,KAGVC,EAAQmH,EAAaxJ,QAAQ,CACpC,IAAM0J,EAAOF,EAAanH,GAC1BkH,EAAYA,EAAYA,EAAUG,GAAQtH,EAAOsH,GAG/CD,IAAuBpH,IACrB5E,EAAS8L,IAAcrJ,EAAcqJ,IACpClM,MAAMC,QAAQiM,IAAcP,GAAaO,MAE5CL,SAAwBA,EAAeQ,UAAetH,EAAOsH,IAG/DR,EAAiBK,CAClB,CACF,CAED,OAAOnH,CACT,CChDc,SAAUuH,KACtB,IAAIC,EAA4B,GAqBhC,MAAO,CACDC,gBACF,OAAOD,C,EAET9I,KAvBW,SAAC7D,GAAY,IACS,EADT,cACD2M,GAAU,IAAjC,IAAK,EAAL,qBAAmC,CAAhB,QACR9I,KAAK7D,EACf,gCACH,EAoBE4D,UAlBgB,SAACiJ,GAEjB,OADAF,EAAWG,KAAKD,GACT,CACL9I,YAAa,WACX4I,EAAaA,EAAWzL,QAAO,SAAC6L,GAAC,OAAKA,IAAMF,CAAQ,GACrD,EAEL,EAYE9I,YAVkB,WAClB4I,EAAa,EACf,EAUF,CCzCA,OAAe,SAAC3M,GAAc,OAC5BG,EAAkBH,KAAWE,EAAaF,EAAM,ECDpC,SAAUgN,GAAUC,EAAcC,GAC9C,GAAIC,GAAYF,IAAYE,GAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAI5M,EAAa2M,IAAY3M,EAAa4M,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,IAAMC,EAAQ5K,OAAOK,KAAKmK,GACpBK,EAAQ7K,OAAOK,KAAKoK,GAE1B,GAAIG,EAAMtK,SAAWuK,EAAMvK,OACzB,OAAO,EAGT,IAAK,IAAL,MAAkBsK,EAAK,eAAE,CAApB,IAAMxL,EAAG,KACN0L,EAAON,EAAQpL,GAErB,IAAKyL,EAAME,SAAS3L,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,IAAM4L,EAAOP,EAAQrL,GAErB,GACGvB,EAAaiN,IAASjN,EAAamN,IACnCjN,EAAS+M,IAAS/M,EAASiN,IAC3BrN,MAAMC,QAAQkN,IAASnN,MAAMC,QAAQoN,IACjCT,GAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,CAEV,CACF,CAED,OAAO,CACT,CC5CA,OAAe,SAACzN,GACd,IAAM0N,EAAQ1N,EAAUA,EAAsB2N,cAA6B,EAG3E,OAAO3N,aADL0N,GAASA,EAAME,YAAcF,EAAME,YAAYjD,YAAcA,YAEjE,ECHA,GAAe,SAAC7K,GAAqB,MAClB,oBAAjBA,EAAQC,IAA0B,ECEpC,GAAe,SAACmG,GAAiB,OAC/B2C,GAAa3C,IAAQxF,EAAgBwF,EAAI,ECF3C,GAAe,SAACA,GAAQ,OAAK2H,GAAc3H,IAAQA,EAAI4H,WAAW,ECGlE,SAASC,GAAmBtJ,GAAyC,IAAhCoB,EAAA,uDAA8B,CAAC,EAC5DmI,EAAoB5N,MAAMC,QAAQoE,GAExC,GAAIjE,EAASiE,IAASuJ,EACpB,IAAK,IAAMnM,KAAO4C,EAEdrE,MAAMC,QAAQoE,EAAK5C,KAClBrB,EAASiE,EAAK5C,MAAUoM,EAAkBxJ,EAAK5C,KAEhDgE,EAAOhE,GAAOzB,MAAMC,QAAQoE,EAAK5C,IAAQ,GAAK,CAAC,EAC/CkM,GAAgBtJ,EAAK5C,GAAMgE,EAAOhE,KACxB1B,EAAkBsE,EAAK5C,MACjCgE,EAAOhE,IAAO,GAKpB,OAAOgE,CACT,CAEA,SAASqI,GACPzJ,EACAR,EACAkK,GAEA,IAAMH,EAAoB5N,MAAMC,QAAQoE,GAExC,GAAIjE,EAASiE,IAASuJ,EACpB,IAAK,IAAMnM,KAAO4C,EAEdrE,MAAMC,QAAQoE,EAAK5C,KAClBrB,EAASiE,EAAK5C,MAAUoM,EAAkBxJ,EAAK5C,IAG9CC,EAAYmC,IACZkJ,GAAYgB,EAAsBtM,IAElCsM,EAAsBtM,GAAOzB,MAAMC,QAAQoE,EAAK5C,IAC5CkM,GAAgBtJ,EAAK5C,GAAM,IAAG,eACzBkM,GAAgBtJ,EAAK5C,KAE9BqM,GACEzJ,EAAK5C,GACL1B,EAAkB8D,GAAc,CAAC,EAAIA,EAAWpC,GAChDsM,EAAsBtM,IAI1BsM,EAAsBtM,IAAQmL,GAAUvI,EAAK5C,GAAMoC,EAAWpC,IAKpE,OAAOsM,CACT,CAEA,OAAe,SAAI5L,EAAkB0B,GAAa,OAChDiK,GACE3L,EACA0B,EACA8J,GAAgB9J,GACjB,EChEH,GAAe,SACbjE,EAAQ,OACNuI,EAAa,EAAbA,cAAe0B,EAAW,EAAXA,YAAamE,EAAU,EAAVA,WAAU,OAExCtM,EAAY9B,GACRA,EACAuI,EACU,KAAVvI,EACEqO,IACArO,GACCA,EACDA,EACFiK,GAAe9F,EAASnE,GACxB,IAAIC,KAAKD,GACToO,EACAA,EAAWpO,GACXA,CAAK,ECTa,SAAAsO,GAActI,GACpC,IAAME,EAAMF,EAAGE,IAEf,KAAIF,EAAGI,KAAOJ,EAAGI,KAAKqB,OAAM,SAACvB,GAAG,OAAKA,EAAIxC,QAAQ,IAAIwC,EAAIxC,UAIzD,OAAIuF,GAAY/C,GACPA,EAAIqI,MAGT1F,GAAa3C,GACR0D,GAAc5D,EAAGI,MAAMpG,MAG5BwO,GAAiBtI,GACZ,YAAIA,EAAIuI,iBAAiBnK,KAAI,YAAQ,SAALtE,KAAiB,IAGtD8I,EAAW5C,GACNyD,GAAiB3D,EAAGI,MAAMpG,MAG5B0O,GAAgB5M,EAAYoE,EAAIlG,OAASgG,EAAGE,IAAIlG,MAAQkG,EAAIlG,MAAOgG,EAC5E,CCxBA,OAAe,SACbF,EACA6I,EACAC,EACA9G,GAEA,IAE8B,EAFxBjC,EAAiD,CAAC,EAAE,cAEvCC,GAAW,IAA9B,IAAK,EAAL,qBAAgC,KAArB,EAAI,QACPC,EAAe,EAAI4I,EAAS,GAElC5I,GAASb,EAAIW,EAAQ,EAAME,EAAMC,GAClC,gCAED,MAAO,CACL4I,eACAhO,MAAO,YAAIkF,GACXD,SACAiC,4BAEJ,ECtBA,GAAe,SACb+G,GAAoD,OAEpD/M,EAAY+M,QACRxN,EACAuG,GAAQiH,GACRA,EAAKC,OACLtO,EAASqO,GACTjH,GAAQiH,EAAK7O,OACX6O,EAAK7O,MAAM8O,OACXD,EAAK7O,MACP6O,CAAI,EClBV,GAAe,SAAC5H,GAAoB,OAClCA,EAAQuB,QACPvB,EAAQe,UACPf,EAAQkB,KACRlB,EAAQmB,KACRnB,EAAQgB,WACRhB,EAAQiB,WACRjB,EAAQoB,SACRpB,EAAQqB,SAAS,ECNG,SAAAyG,GACtBnK,EACA+J,EACA9N,GAKA,IAAM6F,EAAQ,EAAI9B,EAAQ/D,GAE1B,GAAI6F,GAASpB,EAAMzE,GACjB,MAAO,CACL6F,QACA7F,QAMJ,IAFA,IAAMD,EAAQC,EAAKc,MAAM,KAElBf,EAAMmC,QAAQ,CACnB,IAAMwB,EAAY3D,EAAMoO,KAAK,KACvBjJ,EAAQ,EAAI4I,EAASpK,GACrB0K,EAAa,EAAIrK,EAAQL,GAE/B,GAAIwB,IAAU3F,MAAMC,QAAQ0F,IAAUlF,IAAS0D,EAC7C,MAAO,CAAE1D,QAGX,GAAIoO,GAAcA,EAAWlP,KAC3B,MAAO,CACLc,KAAM0D,EACNmC,MAAOuI,GAIXrO,EAAMsO,KACP,CAED,MAAO,CACLrO,OAEJ,CC7CA,OAAe,SACbwF,EACA8I,EACAC,EACAC,EAIA5D,GAQA,OAAIA,EAAKI,WAEGuD,GAAe3D,EAAKK,YACrBqD,GAAa9I,IACb+I,EAAcC,EAAe1D,SAAWF,EAAKE,WAC9CtF,IACC+I,EAAcC,EAAezD,WAAaH,EAAKG,aACjDvF,EAGX,ECtBA,GAAe,SAAIH,EAAQrF,GAAY,OACpCa,EAAQ,EAAIwE,EAAKrF,IAAOkC,QAAUiJ,GAAM9F,EAAKrF,EAAK,EC8E/CyO,GAAiB,CACrB7D,KAAMzJ,EACNqN,eAAgBrN,EAChBuN,kBAAkB,GAGJ,SAAAC,KAIkC,IAkC5CC,EAlCJrM,EAAA,uDAA8C,CAAC,EAE3CsM,EAAW,2BACVJ,IACAlM,GAEDuM,EAAsC,CACxCC,YAAa,EACbC,SAAS,EACTC,cAAc,EACdV,aAAa,EACbW,cAAc,EACdC,oBAAoB,EACpBjJ,SAAS,EACTkJ,cAAe,CAAC,EAChBC,YAAa,CAAC,EACdtL,OAAQ,CAAC,GAEP+J,EAAU,CAAC,EACXnM,EAAiBqI,GAAY6E,EAASnN,gBAAkB,CAAC,EACzD4N,EAAcT,EAASU,iBACvB,CAAC,EACDvF,GAAYrI,GACZ6N,EAAc,CAChBC,QAAQ,EACR9H,OAAO,EACPpE,OAAO,GAELJ,EAAgB,CAClBwE,MAAO,IAAIuC,IACXwF,QAAS,IAAIxF,IACbyF,MAAO,IAAIzF,IACX3G,MAAO,IAAI2G,KAGT0F,EAAQ,EACRC,EAAoD,CAAC,EACnD7N,EAAkB,CACtBgN,SAAS,EACTK,aAAa,EACbD,eAAe,EACfH,cAAc,EACd/I,SAAS,EACTnC,QAAQ,GAEJ+L,EAAoC,CACxCvM,MAAOsI,KACP8D,MAAO9D,KACPkE,MAAOlE,MAGHmE,EAA6BC,GAAmBpB,EAASjE,MACzDsF,EAA4BD,GAAmBpB,EAASL,gBACxD2B,EACJtB,EAASd,eAAiB5M,EAEtBiP,EACJ,SAAqBnN,GAAW,OAChC,SAACoN,GACCC,aAAaV,GACbA,EAAQ/F,OAAO0G,WAAWtN,EAAUoN,EACtC,CAAC,EAEGG,EAAY,iDAAG,WAAOC,GAA0B,iFACjC,GAAfvK,GAAU,GAEVlE,EAAgBkE,QAAS,CAAF,oBACf2I,EAAS6B,SAAQ,iBACV,OADU,KACvBtO,EAAa,SAAQuO,IAAgB,mBAAE5M,OAAM,6DACvC6M,EAAyB9C,GAAS,GAAK,4BAFjD5H,EAAU,EAAH,GAIFuK,GAAoBvK,IAAY4I,EAAW5I,UAC9C4I,EAAW5I,QAAUA,EACrB4J,EAAUC,MAAM/M,KAAK,CACnBkD,aAEH,iCAGIA,GAAO,4CACf,gBAjBiB,sCAmBZ2K,EAA2C,SAC/C7Q,GAME,IALFqG,EAAS,UAAH,6CAAG,GACTyK,EAAM,uCACNC,EAAI,uCACJC,IAAkB,UAAH,+CACfC,IAA6B,UAAH,+CAE1B,GAAIF,GAAQD,EAAQ,CAElB,GADAtB,EAAYC,QAAS,EACjBwB,GAA8B1R,MAAMC,QAAQ,EAAIsO,EAAS9N,IAAQ,CACnE,IAAMkR,EAAcJ,EAAO,EAAIhD,EAAS9N,GAAO+Q,EAAKI,KAAMJ,EAAKK,MAC/DJ,GAAmB3M,EAAIyJ,EAAS9N,EAAMkR,EACvC,CAED,GACElP,EAAgB+B,QAChBkN,GACA1R,MAAMC,QAAQ,EAAIsP,EAAW/K,OAAQ/D,IACrC,CACA,IAAM+D,EAAS+M,EACb,EAAIhC,EAAW/K,OAAQ/D,GACvB+Q,EAAKI,KACLJ,EAAKK,MAEPJ,GAAmB3M,EAAIyK,EAAW/K,OAAQ/D,EAAM+D,GAChDsN,GAAgBvC,EAAW/K,OAAQ/D,EACpC,CAED,GACEgC,EAAgBoN,eAChB6B,GACA1R,MAAMC,QAAQ,EAAIsP,EAAWM,cAAepP,IAC5C,CACA,IAAMoP,EAAgB0B,EACpB,EAAIhC,EAAWM,cAAepP,GAC9B+Q,EAAKI,KACLJ,EAAKK,MAEPJ,GAAmB3M,EAAIyK,EAAWM,cAAepP,EAAMoP,EACxD,CAEGpN,EAAgBqN,cAClBP,EAAWO,YAAciC,GAAe3P,EAAgB2N,IAG1DQ,EAAUC,MAAM/M,KAAK,CACnBgM,QAASuC,GAAUvR,EAAMqG,GACzBgJ,YAAaP,EAAWO,YACxBtL,OAAQ+K,EAAW/K,OACnBmC,QAAS4I,EAAW5I,SAEvB,MACC7B,EAAIiL,EAAatP,EAAMqG,EAE3B,EAEMmL,EAAe,SAACxR,EAAyB6F,GAC7CxB,EAAIyK,EAAW/K,OAAQ/D,EAAM6F,GAC7BiK,EAAUC,MAAM/M,KAAK,CACnBe,OAAQ+K,EAAW/K,QAEvB,EAEM0N,EAAsB,SAC1BzR,EACA0R,EACAvS,EACAkG,GAEA,IAAMH,EAAe,EAAI4I,EAAS9N,GAElC,GAAIkF,EAAO,CACT,IAAMvE,EAAe,EACnB2O,EACAtP,EACAiB,EAAY9B,GAAS,EAAIwC,EAAgB3B,GAAQb,GAGnD8B,EAAYN,IACX0E,GAAQA,EAAyBsM,gBAClCD,EACIrN,EACEiL,EACAtP,EACA0R,EAAuB/Q,EAAe8M,GAAcvI,EAAMC,KAE5DyM,GAAc5R,EAAMW,GAExB6O,EAAY7H,OAAS6I,GACtB,CACH,EAEMqB,EAAsB,SAC1B7R,EACA8R,EACAtM,EACAuM,EACAC,GAIA,IAAIC,GAAe,EACbC,EAA8D,CAClElS,QAEImS,EAAyB,EAAIrD,EAAWM,cAAepP,GAE7D,GAAIgC,EAAgBgN,QAAS,CAC3B,IAAMoD,EAAsBtD,EAAWE,QAEvCF,EAAWE,QAAUkD,EAAOlD,QAAUuC,KACtCU,EAAeG,IAAwBF,EAAOlD,OAC/C,CAED,GAAIhN,EAAgBqN,eAAiB7J,GAAeuM,GAAc,CAChE,IAAMM,EAAuB,EAAIvD,EAAWO,YAAarP,GAC1BmM,GAC7B,EAAIxK,EAAgB3B,GACpB8R,GAIE3G,GAAM2D,EAAWO,YAAarP,GAC9BqE,EAAIyK,EAAWO,YAAarP,GAAM,GACtCkS,EAAO7C,YAAcP,EAAWO,YAChC4C,EACEA,GACAI,IAAyB,EAAIvD,EAAWO,YAAarP,EACxD,CAaD,OAXIwF,IAAgB2M,IAClB9N,EAAIyK,EAAWM,cAAepP,EAAMwF,GACpC0M,EAAO9C,cAAgBN,EAAWM,cAClC6C,EACEA,GACCjQ,EAAgBoN,eACf+C,IAA2B3M,GAGjCyM,GAAgBD,GAAgBlC,EAAUC,MAAM/M,KAAKkP,GAE9CD,EAAeC,EAAS,CAAC,CAClC,EAEMI,EAAmB,iDAAG,WAC1BtS,EACAkG,EACAL,EACA0M,GAIC,qFAEKC,EAAqB,EAAI1D,EAAW/K,OAAQ/D,GAC5CyS,EACJzQ,EAAgBkE,SAAW4I,EAAW5I,UAAYA,EAEhD3D,EAAMmQ,YAAc7M,GACtB+I,EAAqBwB,GAAS,kBAAMoB,EAAaxR,EAAM6F,EAAM,KAC1CtD,EAAMmQ,aAEzBpC,aAAaV,GACbhB,EAAqB,KACrB/I,EACIxB,EAAIyK,EAAW/K,OAAQ/D,EAAM6F,GAC7BsF,GAAM2D,EAAW/K,OAAQ/D,KAI5B6F,EAASsG,GAAUqG,EAAoB3M,IAAS2M,IAChDpQ,EAAcmQ,KACfE,IAEME,EAAmB,uCACpBJ,GACCE,EAAoB,CAAEvM,WAAY,CAAC,GAAC,IACxCnC,OAAQ+K,EAAW/K,OACnB/D,SAGF8O,EAAa,2BACRA,GACA6D,GAGL7C,EAAUC,MAAM/M,KAAK2P,IAGvB9C,EAAe7P,KAGbgC,EAAgBiN,eACfrN,OAAOyE,OAAOwJ,GAAgBpK,MAAK,SAACmN,GAAC,OAAKA,CAAC,MAE5C9C,EAAUC,MAAM/M,KAAK,CACnBiM,cAAc,IAEhBY,EAAiB,CAAC,GACnB,2CACF,gBAxDwB,4CA0DnBc,EAAc,iDAAG,WAAO3Q,GAA0B,+EACtD6O,EAAS6B,SAAQ,gCACP7B,EAAS6B,SAAS,eACjBpB,GACLT,EAASgE,QACTC,GACE9S,GAAQmD,EAAOwE,MACfmG,EACAe,EAASd,aACTc,EAAS5H,4BAEZ,8CACA,CAAC,EAAkC,iGAZtB,sCAcd8L,EAA2B,iDAAG,WAAOhT,GAA2B,2GAC3C4Q,IAAgB,OAEzC,GAFyC,SAAjC5M,EAAM,EAANA,OAEJhE,EAAO,eACUA,GAAK,IAAxB,IAAK,EAAL,qBAAW,EAAI,SACP,EAAQ,EAAIgE,EAAQ,IAEtBM,EAAIyK,EAAW/K,OAAQ,EAAM,GAC7BoH,GAAM2D,EAAW/K,OAAQ,EAC9B,+BACF,MACC+K,EAAW/K,OAASA,EACrB,yBAEMA,GAAM,2CACd,gBAfgC,sCAiB3B6M,EAAwB,iDAAG,WAC/B5L,EACAgO,GAA8B,yGAC9BH,EAAU,EAAH,6BAAG,CACRI,OAAO,GACR,wBAEkBjO,GAAM,8CACG,GADjB,EAAI,aACPE,EAAQF,EAAO,IAEV,CAAF,gBAC4B,GAA3BG,EAAsBD,EAAtBC,GAAO2M,EAAU,YAAK5M,EAAK,IAE/BC,EAAI,CAAF,gBAC8C,OAA5C+N,EAAmB/P,EAAOwM,MAAM1P,IAAIkF,EAAGnF,MAAK,UACzBmT,GACvBjO,EACA,EAAIoK,EAAanK,EAAGnF,MACpBmQ,EACAtB,EAAS5H,0BACTiM,GACD,QANe,KAAVE,EAAa,EAAH,MAQDjO,EAAGnF,MAAO,CAAF,gBACC,GAAtB6S,EAAQI,OAAQ,GAEZD,EAAsB,CAAF,qDAKzBA,IACE,EAAII,EAAYjO,EAAGnF,MAChBkT,EACEG,GACEvE,EAAW/K,OACXqP,EACAjO,EAAGnF,MAELqE,EAAIyK,EAAW/K,OAAQoB,EAAGnF,KAAMoT,EAAWjO,EAAGnF,OAChDmL,GAAM2D,EAAW/K,OAAQoB,EAAGnF,OAAO,QAGjC,GAHiC,KAG3C8R,GAAU,uCACDlB,EACLkB,EACAkB,EACAH,GACD,wDAIAA,EAAQI,OAAK,4CACrB,gBArD6B,wCAuDxBK,EAAmB,WAAK,IACK,EADL,cACTnQ,EAAOuM,SAAO,IAAjC,IAAK,EAAL,qBAAmC,KAAxB,EAAI,QACPxK,EAAe,EAAI4I,EAAS,GAElC5I,IACGA,EAAMC,GAAGI,KACNL,EAAMC,GAAGI,KAAKqB,OAAM,SAACvB,GAAG,OAAMkO,GAAKlO,EAAI,KACtCkO,GAAKrO,EAAMC,GAAGE,OACnBmO,GAAW,EACd,gCAEDrQ,EAAOuM,QAAU,IAAIxF,GACvB,EAEMqH,GAAwB,SAACvR,EAAM4D,GAAI,OACvC5D,GAAQ4D,GAAQS,EAAIiL,EAAatP,EAAM4D,IACtCuI,GAAUsH,KAAa9R,EAAe,EAGnC+R,GAAyC,SAC7C3T,EACAY,EACA0C,GAEA,IAAM6N,EAAc,eACd1B,EAAY7H,MACZ2H,EACArO,EAAYN,GACZgB,EACA2B,EAASvD,GAAM,eACZA,EAAQY,GACXA,GAGN,OAAOgT,EAAoB5T,EAAOoD,EAAQ+N,EAAa7N,EACzD,EAEMuQ,GAAiB,SACrB5T,GAAuB,OAEvBa,EACE,EACE2O,EAAY7H,MAAQ2H,EAAc3N,EAClC3B,EACAuC,EAAMgN,iBAAmB,EAAI5N,EAAgB3B,EAAM,IAAM,IAE5D,EAEG4R,GAAgB,SACpB5R,EACAb,GAEE,IADFiH,EAAA,uDAA0B,CAAC,EAErBlB,EAAe,EAAI4I,EAAS9N,GAC9B8R,EAAsB3S,EAE1B,GAAI+F,EAAO,CACT,IAAM2O,EAAiB3O,EAAMC,GAEzB0O,KACDA,EAAehR,UACdwB,EAAIiL,EAAatP,EAAM6N,GAAgB1O,EAAO0U,IAEhD/B,EACE3H,IAAS6C,GAAc6G,EAAexO,MAAQ/F,EAAkBH,GAC5D,GACAA,EAEFwO,GAAiBkG,EAAexO,KAClC,YAAIwO,EAAexO,IAAIe,SAAS0N,SAC9B,SAACC,GAAS,OACPA,EAAUC,SACTlC,EACAnF,SAASoH,EAAU5U,MAAM,IAEtB0U,EAAetO,KACpB1F,EAAgBgU,EAAexO,KACjCwO,EAAetO,KAAKrD,OAAS,EACzB2R,EAAetO,KAAKuO,SAClB,SAACG,GAAW,QACRA,EAAYtC,iBAAmBsC,EAAYpR,YAC5CoR,EAAYnU,QAAUP,MAAMC,QAAQsS,KAC9BA,EAAkBzP,MACnB,SAACuB,GAAY,OAAKA,IAASqQ,EAAY9U,KAAK,IAE9C2S,IAAemC,EAAY9U,MAAM,IAEzC0U,EAAetO,KAAK,KACnBsO,EAAetO,KAAK,GAAGzF,UAAYgS,GAExC+B,EAAetO,KAAKuO,SAClB,SAACI,GAA0B,OACxBA,EAASpU,QAAUoU,EAAS/U,QAAU2S,CAAU,IAG9C1J,GAAYyL,EAAexO,KACpCwO,EAAexO,IAAIlG,MAAQ,IAE3B0U,EAAexO,IAAIlG,MAAQ2S,EAEtB+B,EAAexO,IAAInG,MACtB4Q,EAAUvM,MAAMP,KAAK,CACnBhD,UAKT,EAEAoG,EAAQ2L,aAAe3L,EAAQ+N,cAC9BtC,EACE7R,EACA8R,EACA1L,EAAQ+N,YACR/N,EAAQ2L,aACR,GAGJ3L,EAAQgO,gBAAkBC,GAAQrU,EACpC,EAEMsU,GAAY,SAAZA,EAKJtU,EACAb,EACAiH,GAEA,IAAK,IAAMmO,KAAYpV,EAAO,CAC5B,IAAM2S,EAAa3S,EAAMoV,GACnB7Q,EAAY,GAAH,OAAM1D,EAAI,YAAIuU,GACvBrP,EAAQ,EAAI4I,EAASpK,IAE1BP,EAAOwM,MAAM1P,IAAID,IACfsM,GAAYwF,MACZ5M,GAAUA,EAAMC,KAClB1F,EAAaqS,GAEVF,GAAclO,EAAWoO,EAAY1L,GADrCkO,EAAU5Q,EAAWoO,EAAY1L,EAEtC,CACH,EAEMoO,GAA0C,SAC9CxU,EACAb,GAEE,IADFiH,EAAU,UAAH,6CAAG,CAAC,EAELlB,EAAQ,EAAI4I,EAAS9N,GACrBkH,EAAe/D,EAAOwM,MAAM1P,IAAID,GAChCyU,EAAazK,GAAY7K,GAE/BkF,EAAIiL,EAAatP,EAAMyU,GAEnBvN,GACF4I,EAAUH,MAAM3M,KAAK,CACnBhD,OACAqG,OAAQiJ,KAIPtN,EAAgBgN,SAAWhN,EAAgBqN,cAC5CjJ,EAAQ2L,cAERjD,EAAWO,YAAciC,GAAe3P,EAAgB2N,GAExDQ,EAAUC,MAAM/M,KAAK,CACnBhD,OACAqP,YAAaP,EAAWO,YACxBL,QAASuC,GAAUvR,EAAMyU,QAI7BvP,GAAUA,EAAMC,IAAO7F,EAAkBmV,GAErC7C,GAAc5R,EAAMyU,EAAYrO,GADhCkO,GAAUtU,EAAMyU,EAAYrO,GAIlCsO,EAAU1U,EAAMmD,IAAW2M,EAAUC,MAAM/M,KAAK,CAAC,GACjD8M,EAAUvM,MAAMP,KAAK,CACnBhD,QAEJ,EAEM2U,GAAQ,iDAAkB,WAAOjV,GAAK,6GAGH,GAFjCE,EAASF,EAAME,OACjBI,EAAOJ,EAAOI,OACZkF,EAAe,EAAI4I,EAAS9N,IAEvB,CAAF,gBA4CF,GAzCC8R,EAAalS,EAAOV,KACtBuO,GAAcvI,EAAMC,IACpByP,EAAclV,GACZ8F,EACJ9F,EAAMR,OAASgC,GAAexB,EAAMR,OAASgC,EACzC2T,GACFC,GAAc5P,EAAMC,MACnB0J,EAAS6B,WACT,EAAI5B,EAAW/K,OAAQ/D,KACvBkF,EAAMC,GAAG4P,MACZC,GACExP,EACA,EAAIsJ,EAAWM,cAAepP,GAC9B8O,EAAWP,YACX2B,EACAF,GAEEiF,EAAUP,EAAU1U,EAAMmD,EAAQqC,GAExCnB,EAAIiL,EAAatP,EAAM8R,GAEnBtM,GACFN,EAAMC,GAAG+P,QAAUhQ,EAAMC,GAAG+P,OAAOxV,GACnCkP,GAAsBA,EAAmB,IAChC1J,EAAMC,GAAGwP,UAClBzP,EAAMC,GAAGwP,SAASjV,GAGd6S,EAAaV,EACjB7R,EACA8R,EACAtM,GACA,GAGIwM,GAAgB5P,EAAcmQ,IAAe0C,GAElDzP,GACCsK,EAAUvM,MAAMP,KAAK,CACnBhD,OACAd,KAAMQ,EAAMR,QAGZ2V,EAAsB,CAAF,yCAEpB7C,GACAlC,EAAUC,MAAM/M,KAAK,aAAEhD,QAAUiV,EAAU,CAAC,EAAI1C,KAAc,QAU/D,IANF/M,GAAeyP,GAAWnF,EAAUC,MAAM/M,KAAK,CAAC,GAEjD6M,EAAe7P,IAAQ6P,EAAe7P,GAAQ,GAE9C8P,EAAUC,MAAM/M,KAAK,CACnBiM,cAAc,KAGZJ,EAAS6B,SAAU,CAAF,iCACMC,EAAe,CAAC3Q,IAAM,iBAAvC+D,EAAM,EAANA,OACFoR,EAA4BjH,GAChCY,EAAW/K,OACX+J,EACA9N,GAEIoV,EAAoBlH,GACxBnK,EACA+J,EACAqH,EAA0BnV,MAAQA,GAGpC,EAAQoV,EAAkBvP,MAC1B7F,EAAOoV,EAAkBpV,KAEzBkG,EAAU9D,EAAc2B,GAAQ,yCAGxBoP,GACJjO,EACA,EAAIoK,EAAatP,GACjBmQ,EACAtB,EAAS5H,2BACV,QANE,OAMF,KACDjH,EAPF,EAAQ,EAAH,qBASWwQ,GAAa,GAAK,QAAlCtK,EAAU,EAAH,aAGThB,EAAMC,GAAG4P,MACPV,GACEnP,EAAMC,GAAG4P,MAGbzC,EAAoBtS,EAAMkG,EAAS,EAAOqM,GAAY,4CAEzD,gBAvGa,sCAyGR8B,GAAO,iDAAiC,WAAOrU,GAAI,qGAOpD,GAPsDoG,EAAU,EAAH,6BAAG,CAAC,EAG9DiP,EAAaC,EAAsBtV,GAEzC8P,EAAUC,MAAM/M,KAAK,CACnBiM,cAAc,KAGZJ,EAAS6B,SAAU,CAAF,gCACEqC,EACnB9R,EAAYjB,GAAQA,EAAOqV,GAC5B,OAFKtR,EAAS,EAAH,KAIZmC,EAAU9D,EAAc2B,GACxB6F,EAAmB5J,GACdqV,EAAW5P,MAAK,SAACzF,GAAI,OAAK,EAAI+D,EAAQ/D,EAAK,IAC5CkG,EAAQ,4BACHlG,EAAM,CAAF,iCAELuV,QAAQC,IACZH,EAAW5R,IAAG,iDAAC,WAAOC,GAAS,iFACQ,OAA/BwB,EAAQ,EAAI4I,EAASpK,GAAU,SACxBkN,EACX1L,GAASA,EAAMC,GAAK,eAAGzB,EAAYwB,GAAUA,GAC9C,mFACF,mDALa,KAMf,UARH0E,EAAmB,EAAH,KASdhD,MAAMtG,WACgBwO,EAAW5I,UAAYsK,IAAe,yCAE3BI,EAAyB9C,GAAQ,QAApElE,EAAmB1D,EAAU,EAAH,aAmBxB,OAhBJ4J,EAAUC,MAAM/M,KAAK,wCACdM,EAAStD,IACbgC,EAAgBkE,SAAWA,IAAY4I,EAAW5I,QAC/C,CAAC,EACD,CAAElG,SACF6O,EAAS6B,SAAW,CAAExK,WAAY,CAAC,GAAC,IACxCnC,OAAQ+K,EAAW/K,OACnBkL,cAAc,KAGhB7I,EAAQqP,cACL7L,GACD7E,EACE+I,GACA,SAAC9M,GAAG,OAAK,EAAI8N,EAAW/K,OAAQ/C,EAAI,GACpChB,EAAOqV,EAAalS,EAAOwE,OAC3B,kBAEGiC,GAAgB,4CACxB,gBArDY,sCAuDP6J,GAA4C,SAChD4B,GAIA,IAAMhP,EAAS,2BACV1E,GACC6N,EAAY7H,MAAQ2H,EAAc,CAAC,GAGzC,OAAOrO,EAAYoU,GACfhP,EACA/C,EAAS+R,GACT,EAAIhP,EAAQgP,GACZA,EAAW5R,KAAI,SAACzD,GAAI,OAAK,EAAIqG,EAAQrG,EAA0B,GACrE,EAEM0V,GAAoD,SACxD1V,EACAsB,GAAS,MACL,CACJqU,UAAW,GAAKrU,GAAawN,GAAY/K,OAAQ/D,GACjDgP,UAAW,GAAK1N,GAAawN,GAAYO,YAAarP,GACtDsO,YAAa,GAAKhN,GAAawN,GAAYM,cAAepP,GAC1D6F,MAAO,GAAKvE,GAAawN,GAAY/K,OAAQ/D,GAC9C,EAEK4V,GAAgD,SAAC5V,GACrDA,EACIsV,EAAsBtV,GAAM8T,SAAQ,SAAC+B,GAAS,OAC5C1K,GAAM2D,EAAW/K,OAAQ8R,EAAU,IAEpC/G,EAAW/K,OAAS,CAAC,EAE1B+L,EAAUC,MAAM/M,KAAK,CACnBe,OAAQ+K,EAAW/K,QAEvB,EAEM+R,GAA0C,SAAC9V,EAAM6F,EAAOO,GAC5D,IAAMf,GAAQ,EAAIyI,EAAS9N,EAAM,CAAEmF,GAAI,CAAC,IAAeA,IAAM,CAAC,GAAGE,IAEjEhB,EAAIyK,EAAW/K,OAAQ/D,EAAM,2BACxB6F,GAAK,IACRR,SAGFyK,EAAUC,MAAM/M,KAAK,CACnBhD,OACA+D,OAAQ+K,EAAW/K,OACnBmC,SAAS,IAGXE,GAAWA,EAAQqP,aAAepQ,GAAOA,EAAIC,OAASD,EAAIC,OAC5D,EAEM/B,GAAoC,SACxCvD,EAIAW,GAAsB,OAEtBkD,EAAW7D,GACP8P,EAAUvM,MAAMR,UAAU,CACxBC,KAAM,SAAC+S,GAAI,OACT/V,EACE0T,QAAUlT,EAAWG,GACrBoV,EAKD,IAELrC,GACE1T,EACAW,GACA,EACD,EAED6S,GAA8C,SAACxT,GAAsB,IACA,EADhBoG,EAAU,UAAH,6CAAG,CAAC,EAAC,cAC7CpG,EAAOsV,EAAsBtV,GAAQmD,EAAOwE,OAAK,IAAzE,IAAK,EAAL,qBAA2E,KAAhEjE,EAAS,QAClBP,EAAOwE,MAAMqO,OAAOtS,GACpBP,EAAOwM,MAAMqG,OAAOtS,GAEhB,EAAIoK,EAASpK,KACV0C,EAAQ6P,YACX9K,GAAM2C,EAASpK,GACfyH,GAAMmE,EAAa5L,KAGpB0C,EAAQ8P,WAAa/K,GAAM2D,EAAW/K,OAAQL,IAC9C0C,EAAQ+P,WAAahL,GAAM2D,EAAWO,YAAa3L,IACnD0C,EAAQgQ,aAAejL,GAAM2D,EAAWM,cAAe1L,IACvDmL,EAASU,mBACPnJ,EAAQiQ,kBACTlL,GAAMxJ,EAAgB+B,GAE3B,gCAEDoM,EAAUvM,MAAMP,KAAK,CAAC,GAEtB8M,EAAUC,MAAM/M,KAAK,2BAChB8L,GACE1I,EAAQ+P,UAAiB,CAAEnH,QAASuC,MAAhB,CAAC,KAG3BnL,EAAQkQ,aAAe9F,GAC1B,EAEM+F,GAA0C,SAA1CA,EAA2CvW,GAAsB,IAAhBoG,EAAU,UAAH,6CAAG,CAAC,EAC5DlB,EAAQ,EAAI4I,EAAS9N,GACnBwW,EAAoB3P,GAAUT,EAAQvD,UAwB5C,OAtBAwB,EAAIyJ,EAAS9N,EAAM,2BACbkF,GAAS,CAAC,GAAC,IACfC,GAAI,2BACED,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEE,IAAK,CAAErF,UAAQ,IACpDA,OACA2H,OAAO,GACJvB,MAGPjD,EAAOwE,MAAMnE,IAAIxD,GAEjBkF,EACIsR,GACAnS,EACEiL,EACAtP,EACAoG,EAAQvD,cACJrC,EACA,EAAI8O,EAAatP,EAAMyN,GAAcvI,EAAMC,MAEjDsM,EAAoBzR,GAAM,EAAMoG,EAAQjH,OAErC,uCACDqX,EAAoB,CAAE3T,SAAUuD,EAAQvD,UAAa,CAAC,GACtDgM,EAAS5H,0BACT,CACEE,WAAYf,EAAQe,SACpBG,IAAKmP,GAAarQ,EAAQkB,KAC1BC,IAAKkP,GAAarQ,EAAQmB,KAC1BF,UAAWoP,GAAqBrQ,EAAQiB,WACxCD,UAAWqP,GAAarQ,EAAQgB,WAChCI,QAASiP,GAAarQ,EAAQoB,UAEhC,CAAC,GAAC,IACNxH,OACA2U,YACAO,OAAQP,GACRtP,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EAAK,CACPkR,EAASvW,EAAMoG,GACflB,EAAQ,EAAI4I,EAAS9N,GAErB,IAAM0W,EAAWzV,EAAYoE,EAAIlG,QAC7BkG,EAAIsR,kBACDtR,EAAIsR,iBAAiB,yBAAyB,IAEjDtR,EACEuR,EAAkB1O,GAAkBwO,GACpCnR,EAAOL,EAAMC,GAAGI,MAAQ,GAE9B,GACEqR,EACIrR,EAAKlD,MAAK,SAACiE,GAAW,OAAKA,IAAWoQ,CAAQ,IAC9CA,IAAaxR,EAAMC,GAAGE,IAE1B,OAGFhB,EAAIyJ,EAAS9N,EAAM,CACjBmF,GAAI,2BACCD,EAAMC,IACLyR,EACA,CACErR,KAAM,GAAF,mBACCA,EAAKlF,OAAOkT,KAAK,CACpBmD,GAAQ,YACFnX,MAAMC,QAAQ,EAAImC,EAAgB3B,IACpC,CAAC,CAAC,GACF,KAENqF,IAAK,CAAEnG,KAAMwX,EAASxX,KAAMc,SAE9B,CAAEqF,IAAKqR,MAIfjF,EAAoBzR,GAAM,OAAOQ,EAAWkW,EAC7C,MACCxR,EAAQ,EAAI4I,EAAS9N,EAAM,CAAC,IAElBmF,KACRD,EAAMC,GAAGwC,OAAQ,IAGlBkH,EAASU,kBAAoBnJ,EAAQmJ,qBAClCsH,EAAmB1T,EAAOwM,MAAO3P,KAASwP,EAAYC,SACxDtM,EAAOuM,QAAQlM,IAAIxD,E,KAI7B,EAEM8W,GACJ,SAACC,EAASC,GAAS,wDAAK,WAAOC,GAAC,yFAU3B,GATCA,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEbC,GAAoB,EACpBlG,EAAmBlH,GAAYsF,GAEnCQ,EAAUC,MAAM/M,KAAK,CACnBkM,cAAc,IACb,UAGGL,EAAS6B,SAAU,CAAF,gCACcC,IAAgB,gBAAzC5M,EAAM,EAANA,OAAQsC,EAAM,EAANA,OAChByI,EAAW/K,OAASA,EACpBmN,EAAc7K,EAAO,yCAEfuK,EAAyB9C,GAAQ,YAGrC1L,EAAc0M,EAAW/K,QAAS,CAAF,gBAI/B,OAHH+L,EAAUC,MAAM/M,KAAK,CACnBe,OAAQ,CAAC,EACTmL,cAAc,IACb,UACG6H,EAAQ7F,EAAa+F,GAAE,oCAEzBD,EAAW,CAAF,iCACLA,EAAU,eAAKlI,EAAW/K,QAAUkT,GAAE,QAG9CpI,EAASH,kBACP3J,EACE+I,GACA,SAAC9M,GAAG,OAAK,EAAI8N,EAAW/K,OAAQ/C,EAAI,GACpCmC,EAAOwE,OACP,gCAGoB,MAHpB,0BAGNyP,GAAoB,EAAM,aAWvB,OAXuB,UAG1BtI,EAAWP,aAAc,EACzBuB,EAAUC,MAAM/M,KAAK,CACnBuL,aAAa,EACbW,cAAc,EACdC,mBACE/M,EAAc0M,EAAW/K,SAAWqT,EACtCrI,YAAaD,EAAWC,YAAc,EACtChL,OAAQ+K,EAAW/K,SAClB,6EAEN,mDArDkB,EAqDlB,EAEGsT,GAA8C,SAACrX,GAAsB,IAAhBoG,EAAU,UAAH,6CAAG,CAAC,EAChE,EAAI0H,EAAS9N,KACXiB,EAAYmF,EAAQzF,cACtB6T,GAASxU,EAAM,EAAI2B,EAAgB3B,KAEnCwU,GAASxU,EAAMoG,EAAQzF,cACvB0D,EAAI1C,EAAgB3B,EAAMoG,EAAQzF,eAG/ByF,EAAQgQ,aACXjL,GAAM2D,EAAWM,cAAepP,GAG7BoG,EAAQ+P,YACXhL,GAAM2D,EAAWO,YAAarP,GAC9B8O,EAAWE,QAAU5I,EAAQzF,aACzB4Q,GAAUvR,EAAM,EAAI2B,EAAgB3B,IACpCuR,MAGDnL,EAAQ8P,YACX/K,GAAM2D,EAAW/K,OAAQ/D,GACzBgC,EAAgBkE,SAAWsK,KAG7BV,EAAUC,MAAM/M,KAAK,eAAK8L,IAE9B,EAEMwI,GAAqC,SACzClU,GAEE,IADFmU,EAAmB,UAAH,6CAAG,CAAC,EAEdC,EAAgBpU,GAAczB,EAC9B8V,EAAqBzN,GAAYwN,GACjCnR,EACJjD,IAAehB,EAAcgB,GACzBqU,EACA9V,EAMN,GAJK4V,EAAiBG,oBACpB/V,EAAiB6V,IAGdD,EAAiBI,WAAY,CAChC,GAAIJ,EAAiBK,gBAAiB,KACA,EADA,cACZzU,EAAOwE,OAAK,IAApC,IAAK,EAAL,qBAAsC,KAA3BjE,EAAS,QAClB,EAAIoL,EAAWO,YAAa3L,GACxBW,EAAIgC,EAAQ3C,EAAW,EAAI4L,EAAa5L,IACxC8Q,GACE9Q,EACA,EAAI2C,EAAQ3C,GAEnB,gCACF,KAAM,CACL,GAAIyG,IAASlJ,EAAYmC,GAAa,KACL,EADK,cACjBD,EAAOwE,OAAK,IAA/B,IAAK,EAAL,qBAAiC,KAAtB,EAAI,QACPzC,EAAQ,EAAI4I,EAAS,GAC3B,GAAI5I,GAASA,EAAMC,GAAI,CACrB,IAAM0O,EAAiBtU,MAAMC,QAAQ0F,EAAMC,GAAGI,MAC1CL,EAAMC,GAAGI,KAAK,GACdL,EAAMC,GAAGE,IAEb,IACE,GAAI2H,GAAc6G,GAAiB,CACjCA,EAAegE,QAAQ,QAASC,QAChC,KACD,CACM,CAAP,SAAO,CACV,CACF,gCACF,CAEDhK,EAAU,CAAC,CACZ,CAEDwB,EAAc/M,EAAMgN,iBAChBgI,EAAiBG,kBACf1N,GAAYrI,GACZ,CAAC,EACH8V,EAEJ3H,EAAUH,MAAM3M,KAAK,CACnBqD,WAGFyJ,EAAUvM,MAAMP,KAAK,CACnBqD,UAEH,CAEDlD,EAAS,CACPwE,MAAO,IAAIuC,IACXwF,QAAS,IAAIxF,IACbyF,MAAO,IAAIzF,IACX3G,MAAO,IAAI2G,IACXvG,UAAU,EACV2B,MAAO,IAGTkK,EAAY7H,OACT3F,EAAgBkE,WAAaqR,EAAiBjB,YAEjD9G,EAAYjM,QAAUhB,EAAMgN,iBAE5BO,EAAUC,MAAM/M,KAAK,CACnB+L,YAAawI,EAAiBQ,gBAC1BjJ,EAAWC,YACX,EACJC,QACEuI,EAAiBpB,WAAaoB,EAAiBK,gBAC3C9I,EAAWE,WAETuI,EAAiBG,mBAChBvL,GAAU/I,EAAYzB,IAE/B4M,cAAagJ,EAAiBS,iBAC1BlJ,EAAWP,YAEfc,YACEkI,EAAiBpB,WAAaoB,EAAiBK,gBAC3C9I,EAAWO,YACXkI,EAAiBG,mBAAqBtU,EACtCkO,GAAe3P,EAAgByB,GAC/B,CAAC,EACPgM,cAAemI,EAAiBnB,YAC5BtH,EAAWM,cACX,CAAC,EACLrL,OAAQwT,EAAiBU,WAAanJ,EAAW/K,OAAS,CAAC,EAC3DmL,cAAc,EACdC,oBAAoB,GAExB,EAEM2I,GAAoC,SAAC1U,EAAYmU,GAAgB,OACrED,GACEzT,EAAWT,GACPA,EAAWkM,GACXlM,EACJmU,EACD,EAEGW,GAA0C,SAAClY,GAAsB,IAAhBoG,EAAU,UAAH,6CAAG,CAAC,EAC1DlB,EAAQ,EAAI4I,EAAS9N,GACrB6T,EAAiB3O,GAASA,EAAMC,GAEtC,GAAI0O,EAAgB,CAClB,IAAM6C,EAAW7C,EAAetO,KAC5BsO,EAAetO,KAAK,GACpBsO,EAAexO,IAEfqR,EAASpR,QACXoR,EAASpR,QACTc,EAAQ+R,cAAgBzB,EAAS0B,SAEpC,CACH,EAEA,MAAO,CACL7W,QAAS,CACPgV,YACA/C,cACAkC,iBACA/E,iBACA+C,aACAnC,aACAf,eACA8C,mBACAzC,oBACA+C,kBACA9D,YACA9N,kBACI8L,cACF,OAAOA,C,EAELwB,kBACF,OAAOA,C,EAELE,kBACF,OAAOA,C,EAELA,gBAAYrQ,GACdqQ,EAAcrQ,C,EAEZwC,qBACF,OAAOA,C,EAELwB,aACF,OAAOA,C,EAELA,WAAOhE,GACTgE,EAAShE,C,EAEP2P,iBACF,OAAOA,C,EAELA,eAAW3P,GACb2P,EAAa3P,C,EAEX0P,eACF,OAAOA,C,EAELA,aAAS1P,GACX0P,EAAW,2BACNA,GACA1P,EAEN,GAEHkV,WACAkC,YACAO,gBACAvT,SACAiR,YACAf,aACAqE,SACAT,cACAzB,eACApC,cACAsC,YACAoC,YACAxC,iBAEJ,CC1uCgB,SAAA2C,KAIkC,IAAhD9V,EAAA,uDAA8C,CAAC,EAEzC+V,EAAe,EAAM7V,SAG3B,EAAqC,EAAM8V,SAAkC,CAC3EvJ,SAAS,EACTC,cAAc,EACdV,aAAa,EACbW,cAAc,EACdC,oBAAoB,EACpBjJ,SAAS,EACT6I,YAAa,EACbM,YAAa,CAAC,EACdD,cAAe,CAAC,EAChBrL,OAAQ,CAAC,EACTrC,cAAea,EAAMb,gBACrB,mBAZKJ,EAAS,KAAEkX,EAAe,KAc5BF,EAAa5V,UAChB4V,EAAa5V,QAAU,2BAClBiM,GAAkBpM,IAAM,IAC3BjB,eAIJ,IAAMC,EAAU+W,EAAa5V,QAAQnB,QAoCrC,OAnCAA,EAAQsN,SAAWtM,EAEnBD,EAAa,CACXQ,QAASvB,EAAQuO,UAAUC,MAC3B9M,SAAU,EAAMwV,aACd,SAACtZ,GACKuZ,EAAsBvZ,EAAOoC,EAAQS,iBAAiB,KACxDT,EAAQuN,WAAa,2BAChBvN,EAAQuN,YACR3P,GAGLqZ,EAAgB,eAAKjX,EAAQuN,aAEjC,GACA,CAACvN,MAIL,EAAMoB,WAAU,WACTpB,EAAQiO,YAAY7H,QACvBpG,EAAQS,gBAAgBkE,SAAW3E,EAAQiP,eAC3CjP,EAAQiO,YAAY7H,OAAQ,GAG1BpG,EAAQiO,YAAYjM,QACtBhC,EAAQiO,YAAYjM,OAAQ,EAC5BhC,EAAQuO,UAAUC,MAAM/M,KAAK,CAAC,IAGhCzB,EAAQ+R,kBACV,IAEAgF,EAAa5V,QAAQpB,UAAYqX,EAAkBrX,EAAWC,GAEvD+W,EAAa5V,OACtB,C","file":"static/js/35.f30a7042.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus) {\n          _f.ref.focus();\n          break;\n        } else if (_f.refs && _f.refs[0].focus) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!Array.isArray(data) && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        copy[key] = cloneObject(data[key]);\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) && isEmptyArray(objectRef)))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    errors: {},\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await executeBuiltInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              try {\n                if (isHTMLElement(fieldReference)) {\n                  fieldReference.closest('form')!.reset();\n                  break;\n                }\n              } catch {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    errors: {},\n    defaultValues: props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: React.useCallback(\n      (value: FieldValues) => {\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...value,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n      [control],\n    ),\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}