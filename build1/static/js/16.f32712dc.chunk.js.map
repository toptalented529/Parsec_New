{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","state/hooks.ts","views/Collectibles/index.tsx","components/Layout/Container.tsx","config/constants/meta.ts","components/Layout/Page.tsx","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","useState","isLoading","setIsLoading","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","handleConfirm","ethers","utils","isAddress","transferFrom","tx","wait","status","console","title","color","mb","nftName","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","teamNftMap","EasterNftCard","props","isClaimable","setIsClaimable","team","easterNftContract","useEasterNftContract","handleClaim","mintNFT","response","useEffect","fetchClaimStatus","nftComponents","NftList","dispatch","useAppDispatch","useSelector","state","collectibles","isInitialized","data","identifiers","Object","keys","fetchWalletNfts","nftsInWallet","Nfts","filter","includes","useGetCollectibles","handleRefresh","orderBy","nfts","map","Card","StyledHero","textSubtle","Collectibles","Page","scale","children","px","mx","maxWidth","DEFAULT_META","image","StyledPage","PageMeta","pathname","useLocation","cakePriceUsd","usePriceColaBusd","cakePriceUsdDisplay","gt","toNumber","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","pageMeta","path","getCustomMeta","pageTitle","join","property","content","baseOrderBy","require","isArray","module","exports","collection","iteratees","orders","guard","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","iteratee","index","result","key","object","other","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol"],"mappings":"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","file":"static/js/16.f32712dc.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from 'parsec-swap-uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\n        setIsLoading(true)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from 'parsec-swap-uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    const tx = await onClaim()\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'))\n      onDismiss()\n      onSuccess()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 24px 24px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from 'parsec-swap-uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/profile/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport Nfts from 'config/constants/nfts'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\nimport { fetchWalletNfts } from './collectibles'\nimport { parseBigNumberObj } from './predictions/helpers'\n\n// /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from 'parsec-swap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {t('Inv Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n","import React from 'react'\nimport { Box, BoxProps } from 'parsec-swap-uikit'\n\nconst Container: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box px={['16px', '24px']} mx=\"auto\" maxWidth=\"1200px\" {...props}>\n    {children}\n  </Box>\n)\n\nexport default Container\n","import { ContextApi } from 'contexts/Localization/types'\nimport { PageMeta } from './types'\n\nexport const DEFAULT_META: PageMeta = {\n  title: 'InveSwap',\n  description:\n    'The most popular AMM on BSC by user count! Earn CAKE through yield farming or win it in the Lottery, then stake it in Syrup Pools to earn more tokens! Initial Farm Offerings (new token launch model pioneered by InveSwap), NFTs, and more, on a platform you can trust.',\n  image: 'https://matchaswap.zilionixx.com/images/hero.png',\n}\n\nexport const getCustomMeta = (path: string, t: ContextApi['t']): PageMeta => {\n  switch (path) {\n    case '/':\n      return {\n        title: `${t('Home')} | ${t('InveSwap')}`,\n      }\n    case '/competition':\n      return {\n        title: `${t('Trading Battle')} | ${t('InveSwap')}`,\n      }\n    case '/prediction':\n      return {\n        title: `${t('Prediction')} | ${t('InveSwap')}`,\n      }\n    case '/farms':\n      return {\n        title: `${t('Farms')} | ${t('InveSwap')}`,\n      }\n    case '/pools':\n      return {\n        title: `${t('Pools')} | ${t('InveSwap')}`,\n      }\n    case '/lottery':\n      return {\n        title: `${t('Lottery')} | ${t('InveSwap')}`,\n      }\n    case '/collectibles':\n      return {\n        title: `${t('Collectibles')} | ${t('InveSwap')}`,\n      }\n    case '/ifo':\n      return {\n        title: `${t('Initial Farm Offering')} | ${t('InveSwap')}`,\n      }\n    case '/teams':\n      return {\n        title: `${t('Leaderboard')} | ${t('InveSwap')}`,\n      }\n    case '/profile/tasks':\n      return {\n        title: `${t('Task Center')} | ${t('InveSwap')}`,\n      }\n    case '/profile':\n      return {\n        title: `${t('Your Profile')} | ${t('InveSwap')}`,\n      }\n    default:\n      return null\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Helmet } from 'react-helmet-async'\nimport { useLocation } from 'react-router'\nimport { DEFAULT_META, getCustomMeta } from 'config/constants/meta'\nimport { usePriceColaBusd } from 'state/farms/hooks'\nimport Container from './Container'\n\nconst StyledPage = styled(Container)`\n  text-align: center;\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nconst PageMeta = () => {\n  const { t } = useTranslation()\n  const { pathname } = useLocation()\n  const cakePriceUsd = usePriceColaBusd()\n  const cakePriceUsdDisplay = cakePriceUsd.gt(0)\n    ? `$${cakePriceUsd.toNumber().toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`\n    : ''\n\n  const pageMeta = getCustomMeta(pathname, t) || {}\n  const { title, description, image } = { ...DEFAULT_META, ...pageMeta }\n  const pageTitle = cakePriceUsdDisplay ? [title, cakePriceUsdDisplay].join(' - ') : title\n\n  return (\n    <Helmet>\n      <title>{pageTitle}</title>\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n    </Helmet>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  return (\n    <>\n      <PageMeta />\n      <StyledPage {...props}>{children}</StyledPage>\n    </>\n  )\n}\n\nexport default Page\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n"],"sourceRoot":""}